/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"graph":3,"states":4,"state":5,"STATE":6,"state_flags":7,"{":8,"triggers":9,"}":10,"opt_semi":11,"[":12,"flags":13,"]":14,"WORD":15,",":16,"trigger":17,"TRIG_IN":18,"actions":19,"TRIG_OUT":20,"TRIG_AT":21,"identifier":22,"full_action":23,";":24,".":25,"conditional":26,"action":27,"?":28,"logical_or_expression":29,"async_specifier":30,"argument_expression_list":31,"!":32,"primary_expression":33,"NUMBER":34,"STRING_LITERAL":35,"(":36,"expression":37,")":38,"postfix_expression":39,"INC_OP":40,"DEC_OP":41,"unary_expression":42,"unary_operator":43,"&":44,"*":45,"+":46,"-":47,"~":48,"multiplicative_expression":49,"/":50,"%":51,"additive_expression":52,"shift_expression":53,"LEFT_OP":54,"RIGHT_OP":55,"relational_expression":56,"<":57,">":58,"LE_OP":59,"GE_OP":60,"equality_expression":61,"EQ_OP":62,"NE_OP":63,"and_expression":64,"exclusive_or_expression":65,"^":66,"inclusive_or_expression":67,"|":68,"logical_and_expression":69,"AND_OP":70,"OR_OP":71,"assignment_expression":72,"assignment_operator":73,"=":74,"MUL_ASSIGN":75,"DIV_ASSIGN":76,"MOD_ASSIGN":77,"ADD_ASSIGN":78,"SUB_ASSIGN":79,"LEFT_ASSIGN":80,"RIGHT_ASSIGN":81,"AND_ASSIGN":82,"XOR_ASSIGN":83,"OR_ASSIGN":84,"constant_expression":85,"$accept":0,"$end":1},
terminals_: {2:"error",6:"STATE",8:"{",10:"}",12:"[",14:"]",15:"WORD",16:",",18:"TRIG_IN",20:"TRIG_OUT",21:"TRIG_AT",24:";",25:".",28:"?",32:"!",34:"NUMBER",35:"STRING_LITERAL",36:"(",38:")",40:"INC_OP",41:"DEC_OP",44:"&",45:"*",46:"+",47:"-",48:"~",50:"/",51:"%",54:"LEFT_OP",55:"RIGHT_OP",57:"<",58:">",59:"LE_OP",60:"GE_OP",62:"EQ_OP",63:"NE_OP",66:"^",68:"|",70:"AND_OP",71:"OR_OP",74:"=",75:"MUL_ASSIGN",76:"DIV_ASSIGN",77:"MOD_ASSIGN",78:"ADD_ASSIGN",79:"SUB_ASSIGN",80:"LEFT_ASSIGN",81:"RIGHT_ASSIGN",82:"AND_ASSIGN",83:"XOR_ASSIGN",84:"OR_ASSIGN"},
productions_: [0,[3,1],[4,1],[4,2],[5,6],[7,0],[7,3],[13,1],[13,3],[9,0],[9,2],[17,4],[17,4],[17,5],[19,0],[19,3],[11,0],[11,1],[22,1],[22,3],[23,2],[23,1],[26,2],[27,2],[27,3],[30,0],[30,1],[33,1],[33,1],[33,1],[33,3],[39,1],[39,4],[39,3],[39,4],[39,3],[39,2],[39,2],[31,1],[31,3],[42,1],[42,2],[42,2],[42,2],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[49,1],[49,3],[49,3],[49,3],[52,1],[52,3],[52,3],[53,1],[53,3],[53,3],[56,1],[56,3],[56,3],[56,3],[56,3],[61,1],[61,3],[61,3],[64,1],[64,3],[65,1],[65,3],[67,1],[67,3],[69,1],[69,3],[29,1],[29,3],[72,1],[72,3],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[37,1],[37,3],[85,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0]; 
break;
case 2: this.$ = [ $$[$0] ]; 
break;
case 3: this.$ = $$[$0-1].concat( [ $$[$0] ] ); 
break;
case 5: this.$ = []; 
break;
case 6: this.$ = $$[$0-1]; 
break;
case 7: this.$ = [ $$[$0] ]; 
break;
case 8: this.$ = $$[$0-2].concat( [ $$[$0] ] ) 
break;
case 9: this.$ = []; 
break;
case 10: this.$ = $$[$0-1].concat( [ $$[$0] ] ); 
break;
case 14: this.$ = []; 
break;
case 15: this.$ = $$[$0-2].concat( [ $$[$0-1] ] ); 
break;
case 18: this.$ = [ $$[$0] ]; 
break;
case 19: this.$ = $$[$0-2].concat( [ $$[$0] ] ) 
break;
case 25: this.$ = false; 
break;
case 26: this.$ = true; 
break;
}
},
table: [{3:1,4:2,5:3,6:[1,4]},{1:[3]},{1:[2,1],5:5,6:[1,4]},{1:[2,2],6:[2,2]},{7:6,8:[2,5],12:[1,7]},{1:[2,3],6:[2,3]},{8:[1,8]},{13:9,15:[1,10]},{9:11,10:[2,9],18:[2,9],20:[2,9],21:[2,9]},{14:[1,12],16:[1,13]},{14:[2,7],16:[2,7]},{10:[1,14],17:15,18:[1,16],20:[1,17],21:[1,18]},{8:[2,6]},{15:[1,19]},{1:[2,16],6:[2,16],11:20,24:[1,21]},{10:[2,10],18:[2,10],20:[2,10],21:[2,10]},{8:[1,22]},{8:[1,23]},{15:[1,25],22:24},{14:[2,8],16:[2,8]},{1:[2,4],6:[2,4]},{1:[2,17],6:[2,17]},{10:[2,14],15:[2,14],19:26,28:[2,14],32:[2,14]},{10:[2,14],15:[2,14],19:27,28:[2,14],32:[2,14]},{8:[1,28],25:[1,29]},{8:[2,18],25:[2,18]},{10:[1,30],15:[2,25],23:31,26:32,27:33,28:[1,34],30:35,32:[1,36]},{10:[1,37],15:[2,25],23:31,26:32,27:33,28:[1,34],30:35,32:[1,36]},{10:[2,14],15:[2,14],19:38,28:[2,14],32:[2,14]},{15:[1,39]},{10:[2,11],18:[2,11],20:[2,11],21:[2,11]},{24:[1,40]},{15:[2,25],27:41,30:35,32:[1,36]},{24:[2,21]},{15:[1,64],29:42,32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:52,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62],49:51,52:50,53:49,56:48,61:47,64:46,65:45,67:44,69:43},{15:[1,68]},{15:[2,26]},{10:[2,12],18:[2,12],20:[2,12],21:[2,12]},{10:[1,69],15:[2,25],23:31,26:32,27:33,28:[1,34],30:35,32:[1,36]},{8:[2,19],25:[2,19]},{10:[2,15],15:[2,15],28:[2,15],32:[2,15]},{24:[2,20]},{15:[2,22],32:[2,22],71:[1,70]},{14:[2,76],15:[2,76],16:[2,76],24:[2,76],32:[2,76],38:[2,76],70:[1,71],71:[2,76]},{14:[2,74],15:[2,74],16:[2,74],24:[2,74],32:[2,74],38:[2,74],68:[1,72],70:[2,74],71:[2,74]},{14:[2,72],15:[2,72],16:[2,72],24:[2,72],32:[2,72],38:[2,72],66:[1,73],68:[2,72],70:[2,72],71:[2,72]},{14:[2,70],15:[2,70],16:[2,70],24:[2,70],32:[2,70],38:[2,70],44:[1,74],66:[2,70],68:[2,70],70:[2,70],71:[2,70]},{14:[2,68],15:[2,68],16:[2,68],24:[2,68],32:[2,68],38:[2,68],44:[2,68],62:[1,75],63:[1,76],66:[2,68],68:[2,68],70:[2,68],71:[2,68]},{14:[2,65],15:[2,65],16:[2,65],24:[2,65],32:[2,65],38:[2,65],44:[2,65],57:[1,77],58:[1,78],59:[1,79],60:[1,80],62:[2,65],63:[2,65],66:[2,65],68:[2,65],70:[2,65],71:[2,65]},{14:[2,60],15:[2,60],16:[2,60],24:[2,60],32:[2,60],38:[2,60],44:[2,60],54:[1,81],55:[1,82],57:[2,60],58:[2,60],59:[2,60],60:[2,60],62:[2,60],63:[2,60],66:[2,60],68:[2,60],70:[2,60],71:[2,60]},{14:[2,57],15:[2,57],16:[2,57],24:[2,57],32:[2,57],38:[2,57],44:[2,57],46:[1,83],47:[1,84],54:[2,57],55:[2,57],57:[2,57],58:[2,57],59:[2,57],60:[2,57],62:[2,57],63:[2,57],66:[2,57],68:[2,57],70:[2,57],71:[2,57]},{14:[2,54],15:[2,54],16:[2,54],24:[2,54],32:[2,54],38:[2,54],44:[2,54],45:[1,85],46:[2,54],47:[2,54],50:[1,86],51:[1,87],54:[2,54],55:[2,54],57:[2,54],58:[2,54],59:[2,54],60:[2,54],62:[2,54],63:[2,54],66:[2,54],68:[2,54],70:[2,54],71:[2,54]},{14:[2,50],15:[2,50],16:[2,50],24:[2,50],32:[2,50],38:[2,50],44:[2,50],45:[2,50],46:[2,50],47:[2,50],50:[2,50],51:[2,50],54:[2,50],55:[2,50],57:[2,50],58:[2,50],59:[2,50],60:[2,50],62:[2,50],63:[2,50],66:[2,50],68:[2,50],70:[2,50],71:[2,50]},{12:[1,88],14:[2,40],15:[2,40],16:[2,40],24:[2,40],25:[1,90],32:[2,40],36:[1,89],38:[2,40],40:[1,91],41:[1,92],44:[2,40],45:[2,40],46:[2,40],47:[2,40],50:[2,40],51:[2,40],54:[2,40],55:[2,40],57:[2,40],58:[2,40],59:[2,40],60:[2,40],62:[2,40],63:[2,40],66:[2,40],68:[2,40],70:[2,40],71:[2,40],74:[2,40],75:[2,40],76:[2,40],77:[2,40],78:[2,40],79:[2,40],80:[2,40],81:[2,40],82:[2,40],83:[2,40],84:[2,40]},{15:[1,64],32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:93,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62]},{15:[1,64],32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:94,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62]},{15:[1,64],32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:95,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62]},{12:[2,31],14:[2,31],15:[2,31],16:[2,31],24:[2,31],25:[2,31],32:[2,31],36:[2,31],38:[2,31],40:[2,31],41:[2,31],44:[2,31],45:[2,31],46:[2,31],47:[2,31],50:[2,31],51:[2,31],54:[2,31],55:[2,31],57:[2,31],58:[2,31],59:[2,31],60:[2,31],62:[2,31],63:[2,31],66:[2,31],68:[2,31],70:[2,31],71:[2,31],74:[2,31],75:[2,31],76:[2,31],77:[2,31],78:[2,31],79:[2,31],80:[2,31],81:[2,31],82:[2,31],83:[2,31],84:[2,31]},{15:[2,44],32:[2,44],34:[2,44],35:[2,44],36:[2,44],40:[2,44],41:[2,44],44:[2,44],45:[2,44],46:[2,44],47:[2,44],48:[2,44]},{15:[2,45],32:[2,45],34:[2,45],35:[2,45],36:[2,45],40:[2,45],41:[2,45],44:[2,45],45:[2,45],46:[2,45],47:[2,45],48:[2,45]},{15:[2,46],32:[2,46],34:[2,46],35:[2,46],36:[2,46],40:[2,46],41:[2,46],44:[2,46],45:[2,46],46:[2,46],47:[2,46],48:[2,46]},{15:[2,47],32:[2,47],34:[2,47],35:[2,47],36:[2,47],40:[2,47],41:[2,47],44:[2,47],45:[2,47],46:[2,47],47:[2,47],48:[2,47]},{15:[2,48],32:[2,48],34:[2,48],35:[2,48],36:[2,48],40:[2,48],41:[2,48],44:[2,48],45:[2,48],46:[2,48],47:[2,48],48:[2,48]},{15:[2,49],32:[2,49],34:[2,49],35:[2,49],36:[2,49],40:[2,49],41:[2,49],44:[2,49],45:[2,49],46:[2,49],47:[2,49],48:[2,49]},{12:[2,27],14:[2,27],15:[2,27],16:[2,27],24:[2,27],25:[2,27],32:[2,27],36:[2,27],38:[2,27],40:[2,27],41:[2,27],44:[2,27],45:[2,27],46:[2,27],47:[2,27],50:[2,27],51:[2,27],54:[2,27],55:[2,27],57:[2,27],58:[2,27],59:[2,27],60:[2,27],62:[2,27],63:[2,27],66:[2,27],68:[2,27],70:[2,27],71:[2,27],74:[2,27],75:[2,27],76:[2,27],77:[2,27],78:[2,27],79:[2,27],80:[2,27],81:[2,27],82:[2,27],83:[2,27],84:[2,27]},{12:[2,28],14:[2,28],15:[2,28],16:[2,28],24:[2,28],25:[2,28],32:[2,28],36:[2,28],38:[2,28],40:[2,28],41:[2,28],44:[2,28],45:[2,28],46:[2,28],47:[2,28],50:[2,28],51:[2,28],54:[2,28],55:[2,28],57:[2,28],58:[2,28],59:[2,28],60:[2,28],62:[2,28],63:[2,28],66:[2,28],68:[2,28],70:[2,28],71:[2,28],74:[2,28],75:[2,28],76:[2,28],77:[2,28],78:[2,28],79:[2,28],80:[2,28],81:[2,28],82:[2,28],83:[2,28],84:[2,28]},{12:[2,29],14:[2,29],15:[2,29],16:[2,29],24:[2,29],25:[2,29],32:[2,29],36:[2,29],38:[2,29],40:[2,29],41:[2,29],44:[2,29],45:[2,29],46:[2,29],47:[2,29],50:[2,29],51:[2,29],54:[2,29],55:[2,29],57:[2,29],58:[2,29],59:[2,29],60:[2,29],62:[2,29],63:[2,29],66:[2,29],68:[2,29],70:[2,29],71:[2,29],74:[2,29],75:[2,29],76:[2,29],77:[2,29],78:[2,29],79:[2,29],80:[2,29],81:[2,29],82:[2,29],83:[2,29],84:[2,29]},{15:[1,64],29:98,32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],37:96,39:53,40:[1,54],41:[1,55],42:99,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62],49:51,52:50,53:49,56:48,61:47,64:46,65:45,67:44,69:43,72:97},{15:[1,64],24:[2,23],29:101,31:100,32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:52,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62],49:51,52:50,53:49,56:48,61:47,64:46,65:45,67:44,69:43},{10:[2,13],18:[2,13],20:[2,13],21:[2,13]},{15:[1,64],32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:52,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62],49:51,52:50,53:49,56:48,61:47,64:46,65:45,67:44,69:102},{15:[1,64],32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:52,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62],49:51,52:50,53:49,56:48,61:47,64:46,65:45,67:103},{15:[1,64],32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:52,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62],49:51,52:50,53:49,56:48,61:47,64:46,65:104},{15:[1,64],32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:52,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62],49:51,52:50,53:49,56:48,61:47,64:105},{15:[1,64],32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:52,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62],49:51,52:50,53:49,56:48,61:106},{15:[1,64],32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:52,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62],49:51,52:50,53:49,56:107},{15:[1,64],32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:52,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62],49:51,52:50,53:49,56:108},{15:[1,64],32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:52,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62],49:51,52:50,53:109},{15:[1,64],32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:52,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62],49:51,52:50,53:110},{15:[1,64],32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:52,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62],49:51,52:50,53:111},{15:[1,64],32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:52,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62],49:51,52:50,53:112},{15:[1,64],32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:52,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62],49:51,52:113},{15:[1,64],32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:52,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62],49:51,52:114},{15:[1,64],32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:52,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62],49:115},{15:[1,64],32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:52,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62],49:116},{15:[1,64],32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:117,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62]},{15:[1,64],32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:118,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62]},{15:[1,64],32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:119,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62]},{15:[1,64],29:98,32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],37:120,39:53,40:[1,54],41:[1,55],42:99,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62],49:51,52:50,53:49,56:48,61:47,64:46,65:45,67:44,69:43,72:97},{15:[1,64],29:101,31:122,32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],38:[1,121],39:53,40:[1,54],41:[1,55],42:52,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62],49:51,52:50,53:49,56:48,61:47,64:46,65:45,67:44,69:43},{15:[1,123]},{12:[2,36],14:[2,36],15:[2,36],16:[2,36],24:[2,36],25:[2,36],32:[2,36],36:[2,36],38:[2,36],40:[2,36],41:[2,36],44:[2,36],45:[2,36],46:[2,36],47:[2,36],50:[2,36],51:[2,36],54:[2,36],55:[2,36],57:[2,36],58:[2,36],59:[2,36],60:[2,36],62:[2,36],63:[2,36],66:[2,36],68:[2,36],70:[2,36],71:[2,36],74:[2,36],75:[2,36],76:[2,36],77:[2,36],78:[2,36],79:[2,36],80:[2,36],81:[2,36],82:[2,36],83:[2,36],84:[2,36]},{12:[2,37],14:[2,37],15:[2,37],16:[2,37],24:[2,37],25:[2,37],32:[2,37],36:[2,37],38:[2,37],40:[2,37],41:[2,37],44:[2,37],45:[2,37],46:[2,37],47:[2,37],50:[2,37],51:[2,37],54:[2,37],55:[2,37],57:[2,37],58:[2,37],59:[2,37],60:[2,37],62:[2,37],63:[2,37],66:[2,37],68:[2,37],70:[2,37],71:[2,37],74:[2,37],75:[2,37],76:[2,37],77:[2,37],78:[2,37],79:[2,37],80:[2,37],81:[2,37],82:[2,37],83:[2,37],84:[2,37]},{14:[2,41],15:[2,41],16:[2,41],24:[2,41],32:[2,41],38:[2,41],44:[2,41],45:[2,41],46:[2,41],47:[2,41],50:[2,41],51:[2,41],54:[2,41],55:[2,41],57:[2,41],58:[2,41],59:[2,41],60:[2,41],62:[2,41],63:[2,41],66:[2,41],68:[2,41],70:[2,41],71:[2,41],74:[2,41],75:[2,41],76:[2,41],77:[2,41],78:[2,41],79:[2,41],80:[2,41],81:[2,41],82:[2,41],83:[2,41],84:[2,41]},{14:[2,42],15:[2,42],16:[2,42],24:[2,42],32:[2,42],38:[2,42],44:[2,42],45:[2,42],46:[2,42],47:[2,42],50:[2,42],51:[2,42],54:[2,42],55:[2,42],57:[2,42],58:[2,42],59:[2,42],60:[2,42],62:[2,42],63:[2,42],66:[2,42],68:[2,42],70:[2,42],71:[2,42],74:[2,42],75:[2,42],76:[2,42],77:[2,42],78:[2,42],79:[2,42],80:[2,42],81:[2,42],82:[2,42],83:[2,42],84:[2,42]},{14:[2,43],15:[2,43],16:[2,43],24:[2,43],32:[2,43],38:[2,43],44:[2,43],45:[2,43],46:[2,43],47:[2,43],50:[2,43],51:[2,43],54:[2,43],55:[2,43],57:[2,43],58:[2,43],59:[2,43],60:[2,43],62:[2,43],63:[2,43],66:[2,43],68:[2,43],70:[2,43],71:[2,43],74:[2,43],75:[2,43],76:[2,43],77:[2,43],78:[2,43],79:[2,43],80:[2,43],81:[2,43],82:[2,43],83:[2,43],84:[2,43]},{16:[1,125],38:[1,124]},{14:[2,91],16:[2,91],38:[2,91]},{14:[2,78],16:[2,78],38:[2,78],71:[1,70]},{14:[2,50],16:[2,50],38:[2,50],44:[2,50],45:[2,50],46:[2,50],47:[2,50],50:[2,50],51:[2,50],54:[2,50],55:[2,50],57:[2,50],58:[2,50],59:[2,50],60:[2,50],62:[2,50],63:[2,50],66:[2,50],68:[2,50],70:[2,50],71:[2,50],73:126,74:[1,127],75:[1,128],76:[1,129],77:[1,130],78:[1,131],79:[1,132],80:[1,133],81:[1,134],82:[1,135],83:[1,136],84:[1,137]},{16:[1,138],24:[2,24]},{16:[2,38],24:[2,38],38:[2,38],71:[1,70]},{14:[2,77],15:[2,77],16:[2,77],24:[2,77],32:[2,77],38:[2,77],70:[1,71],71:[2,77]},{14:[2,75],15:[2,75],16:[2,75],24:[2,75],32:[2,75],38:[2,75],68:[1,72],70:[2,75],71:[2,75]},{14:[2,73],15:[2,73],16:[2,73],24:[2,73],32:[2,73],38:[2,73],66:[1,73],68:[2,73],70:[2,73],71:[2,73]},{14:[2,71],15:[2,71],16:[2,71],24:[2,71],32:[2,71],38:[2,71],44:[1,74],66:[2,71],68:[2,71],70:[2,71],71:[2,71]},{14:[2,69],15:[2,69],16:[2,69],24:[2,69],32:[2,69],38:[2,69],44:[2,69],62:[1,75],63:[1,76],66:[2,69],68:[2,69],70:[2,69],71:[2,69]},{14:[2,66],15:[2,66],16:[2,66],24:[2,66],32:[2,66],38:[2,66],44:[2,66],57:[1,77],58:[1,78],59:[1,79],60:[1,80],62:[2,66],63:[2,66],66:[2,66],68:[2,66],70:[2,66],71:[2,66]},{14:[2,67],15:[2,67],16:[2,67],24:[2,67],32:[2,67],38:[2,67],44:[2,67],57:[1,77],58:[1,78],59:[1,79],60:[1,80],62:[2,67],63:[2,67],66:[2,67],68:[2,67],70:[2,67],71:[2,67]},{14:[2,61],15:[2,61],16:[2,61],24:[2,61],32:[2,61],38:[2,61],44:[2,61],54:[1,81],55:[1,82],57:[2,61],58:[2,61],59:[2,61],60:[2,61],62:[2,61],63:[2,61],66:[2,61],68:[2,61],70:[2,61],71:[2,61]},{14:[2,62],15:[2,62],16:[2,62],24:[2,62],32:[2,62],38:[2,62],44:[2,62],54:[1,81],55:[1,82],57:[2,62],58:[2,62],59:[2,62],60:[2,62],62:[2,62],63:[2,62],66:[2,62],68:[2,62],70:[2,62],71:[2,62]},{14:[2,63],15:[2,63],16:[2,63],24:[2,63],32:[2,63],38:[2,63],44:[2,63],54:[1,81],55:[1,82],57:[2,63],58:[2,63],59:[2,63],60:[2,63],62:[2,63],63:[2,63],66:[2,63],68:[2,63],70:[2,63],71:[2,63]},{14:[2,64],15:[2,64],16:[2,64],24:[2,64],32:[2,64],38:[2,64],44:[2,64],54:[1,81],55:[1,82],57:[2,64],58:[2,64],59:[2,64],60:[2,64],62:[2,64],63:[2,64],66:[2,64],68:[2,64],70:[2,64],71:[2,64]},{14:[2,58],15:[2,58],16:[2,58],24:[2,58],32:[2,58],38:[2,58],44:[2,58],46:[1,83],47:[1,84],54:[2,58],55:[2,58],57:[2,58],58:[2,58],59:[2,58],60:[2,58],62:[2,58],63:[2,58],66:[2,58],68:[2,58],70:[2,58],71:[2,58]},{14:[2,59],15:[2,59],16:[2,59],24:[2,59],32:[2,59],38:[2,59],44:[2,59],46:[1,83],47:[1,84],54:[2,59],55:[2,59],57:[2,59],58:[2,59],59:[2,59],60:[2,59],62:[2,59],63:[2,59],66:[2,59],68:[2,59],70:[2,59],71:[2,59]},{14:[2,55],15:[2,55],16:[2,55],24:[2,55],32:[2,55],38:[2,55],44:[2,55],45:[1,85],46:[2,55],47:[2,55],50:[1,86],51:[1,87],54:[2,55],55:[2,55],57:[2,55],58:[2,55],59:[2,55],60:[2,55],62:[2,55],63:[2,55],66:[2,55],68:[2,55],70:[2,55],71:[2,55]},{14:[2,56],15:[2,56],16:[2,56],24:[2,56],32:[2,56],38:[2,56],44:[2,56],45:[1,85],46:[2,56],47:[2,56],50:[1,86],51:[1,87],54:[2,56],55:[2,56],57:[2,56],58:[2,56],59:[2,56],60:[2,56],62:[2,56],63:[2,56],66:[2,56],68:[2,56],70:[2,56],71:[2,56]},{14:[2,51],15:[2,51],16:[2,51],24:[2,51],32:[2,51],38:[2,51],44:[2,51],45:[2,51],46:[2,51],47:[2,51],50:[2,51],51:[2,51],54:[2,51],55:[2,51],57:[2,51],58:[2,51],59:[2,51],60:[2,51],62:[2,51],63:[2,51],66:[2,51],68:[2,51],70:[2,51],71:[2,51]},{14:[2,52],15:[2,52],16:[2,52],24:[2,52],32:[2,52],38:[2,52],44:[2,52],45:[2,52],46:[2,52],47:[2,52],50:[2,52],51:[2,52],54:[2,52],55:[2,52],57:[2,52],58:[2,52],59:[2,52],60:[2,52],62:[2,52],63:[2,52],66:[2,52],68:[2,52],70:[2,52],71:[2,52]},{14:[2,53],15:[2,53],16:[2,53],24:[2,53],32:[2,53],38:[2,53],44:[2,53],45:[2,53],46:[2,53],47:[2,53],50:[2,53],51:[2,53],54:[2,53],55:[2,53],57:[2,53],58:[2,53],59:[2,53],60:[2,53],62:[2,53],63:[2,53],66:[2,53],68:[2,53],70:[2,53],71:[2,53]},{14:[1,139],16:[1,125]},{12:[2,33],14:[2,33],15:[2,33],16:[2,33],24:[2,33],25:[2,33],32:[2,33],36:[2,33],38:[2,33],40:[2,33],41:[2,33],44:[2,33],45:[2,33],46:[2,33],47:[2,33],50:[2,33],51:[2,33],54:[2,33],55:[2,33],57:[2,33],58:[2,33],59:[2,33],60:[2,33],62:[2,33],63:[2,33],66:[2,33],68:[2,33],70:[2,33],71:[2,33],74:[2,33],75:[2,33],76:[2,33],77:[2,33],78:[2,33],79:[2,33],80:[2,33],81:[2,33],82:[2,33],83:[2,33],84:[2,33]},{16:[1,138],38:[1,140]},{12:[2,35],14:[2,35],15:[2,35],16:[2,35],24:[2,35],25:[2,35],32:[2,35],36:[2,35],38:[2,35],40:[2,35],41:[2,35],44:[2,35],45:[2,35],46:[2,35],47:[2,35],50:[2,35],51:[2,35],54:[2,35],55:[2,35],57:[2,35],58:[2,35],59:[2,35],60:[2,35],62:[2,35],63:[2,35],66:[2,35],68:[2,35],70:[2,35],71:[2,35],74:[2,35],75:[2,35],76:[2,35],77:[2,35],78:[2,35],79:[2,35],80:[2,35],81:[2,35],82:[2,35],83:[2,35],84:[2,35]},{12:[2,30],14:[2,30],15:[2,30],16:[2,30],24:[2,30],25:[2,30],32:[2,30],36:[2,30],38:[2,30],40:[2,30],41:[2,30],44:[2,30],45:[2,30],46:[2,30],47:[2,30],50:[2,30],51:[2,30],54:[2,30],55:[2,30],57:[2,30],58:[2,30],59:[2,30],60:[2,30],62:[2,30],63:[2,30],66:[2,30],68:[2,30],70:[2,30],71:[2,30],74:[2,30],75:[2,30],76:[2,30],77:[2,30],78:[2,30],79:[2,30],80:[2,30],81:[2,30],82:[2,30],83:[2,30],84:[2,30]},{15:[1,64],29:98,32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:99,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62],49:51,52:50,53:49,56:48,61:47,64:46,65:45,67:44,69:43,72:141},{15:[1,64],29:98,32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:99,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62],49:51,52:50,53:49,56:48,61:47,64:46,65:45,67:44,69:43,72:142},{15:[2,80],32:[2,80],34:[2,80],35:[2,80],36:[2,80],40:[2,80],41:[2,80],44:[2,80],45:[2,80],46:[2,80],47:[2,80],48:[2,80]},{15:[2,81],32:[2,81],34:[2,81],35:[2,81],36:[2,81],40:[2,81],41:[2,81],44:[2,81],45:[2,81],46:[2,81],47:[2,81],48:[2,81]},{15:[2,82],32:[2,82],34:[2,82],35:[2,82],36:[2,82],40:[2,82],41:[2,82],44:[2,82],45:[2,82],46:[2,82],47:[2,82],48:[2,82]},{15:[2,83],32:[2,83],34:[2,83],35:[2,83],36:[2,83],40:[2,83],41:[2,83],44:[2,83],45:[2,83],46:[2,83],47:[2,83],48:[2,83]},{15:[2,84],32:[2,84],34:[2,84],35:[2,84],36:[2,84],40:[2,84],41:[2,84],44:[2,84],45:[2,84],46:[2,84],47:[2,84],48:[2,84]},{15:[2,85],32:[2,85],34:[2,85],35:[2,85],36:[2,85],40:[2,85],41:[2,85],44:[2,85],45:[2,85],46:[2,85],47:[2,85],48:[2,85]},{15:[2,86],32:[2,86],34:[2,86],35:[2,86],36:[2,86],40:[2,86],41:[2,86],44:[2,86],45:[2,86],46:[2,86],47:[2,86],48:[2,86]},{15:[2,87],32:[2,87],34:[2,87],35:[2,87],36:[2,87],40:[2,87],41:[2,87],44:[2,87],45:[2,87],46:[2,87],47:[2,87],48:[2,87]},{15:[2,88],32:[2,88],34:[2,88],35:[2,88],36:[2,88],40:[2,88],41:[2,88],44:[2,88],45:[2,88],46:[2,88],47:[2,88],48:[2,88]},{15:[2,89],32:[2,89],34:[2,89],35:[2,89],36:[2,89],40:[2,89],41:[2,89],44:[2,89],45:[2,89],46:[2,89],47:[2,89],48:[2,89]},{15:[2,90],32:[2,90],34:[2,90],35:[2,90],36:[2,90],40:[2,90],41:[2,90],44:[2,90],45:[2,90],46:[2,90],47:[2,90],48:[2,90]},{15:[1,64],29:143,32:[1,63],33:57,34:[1,65],35:[1,66],36:[1,67],39:53,40:[1,54],41:[1,55],42:52,43:56,44:[1,58],45:[1,59],46:[1,60],47:[1,61],48:[1,62],49:51,52:50,53:49,56:48,61:47,64:46,65:45,67:44,69:43},{12:[2,32],14:[2,32],15:[2,32],16:[2,32],24:[2,32],25:[2,32],32:[2,32],36:[2,32],38:[2,32],40:[2,32],41:[2,32],44:[2,32],45:[2,32],46:[2,32],47:[2,32],50:[2,32],51:[2,32],54:[2,32],55:[2,32],57:[2,32],58:[2,32],59:[2,32],60:[2,32],62:[2,32],63:[2,32],66:[2,32],68:[2,32],70:[2,32],71:[2,32],74:[2,32],75:[2,32],76:[2,32],77:[2,32],78:[2,32],79:[2,32],80:[2,32],81:[2,32],82:[2,32],83:[2,32],84:[2,32]},{12:[2,34],14:[2,34],15:[2,34],16:[2,34],24:[2,34],25:[2,34],32:[2,34],36:[2,34],38:[2,34],40:[2,34],41:[2,34],44:[2,34],45:[2,34],46:[2,34],47:[2,34],50:[2,34],51:[2,34],54:[2,34],55:[2,34],57:[2,34],58:[2,34],59:[2,34],60:[2,34],62:[2,34],63:[2,34],66:[2,34],68:[2,34],70:[2,34],71:[2,34],74:[2,34],75:[2,34],76:[2,34],77:[2,34],78:[2,34],79:[2,34],80:[2,34],81:[2,34],82:[2,34],83:[2,34],84:[2,34]},{14:[2,92],16:[2,92],38:[2,92]},{14:[2,79],16:[2,79],38:[2,79]},{16:[2,39],24:[2,39],38:[2,39],71:[1,70]}],
defaultActions: {12:[2,6],33:[2,21],36:[2,26],41:[2,20]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
/**/) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1: return 35; 
break;
case 2: return 35; 
break;
case 3: return 12; 
break;
case 4: return 14; 
break;
case 5: return 36; 
break;
case 6: return 38; 
break;
case 7: return 8; 
break;
case 8: return 10; 
break;
case 9: return 57; 
break;
case 10: return 58; 
break;
case 11: return 59; 
break;
case 12: return 60; 
break;
case 13: return 62; 
break;
case 14: return 63; 
break;
case 15: return 16; 
break;
case 16: return 24; 
break;
case 17: return 25; 
break;
case 18: return 44; 
break;
case 19: return 68; 
break;
case 20: return 66; 
break;
case 21: return 45; 
break;
case 22: return 50; 
break;
case 23: return 51; 
break;
case 24: return 46; 
break;
case 25: return 47; 
break;
case 26: return 48; 
break;
case 27: return 32; 
break;
case 28: return 28; 
break;
case 29: return 40; 
break;
case 30: return 41; 
break;
case 31: return 70; 
break;
case 32: return 71; 
break;
case 33: return 18; 
break;
case 34: return 20; 
break;
case 35: return 21; 
break;
case 36: return 54; 
break;
case 37: return 55; 
break;
case 38: return 75; 
break;
case 39: return 76; 
break;
case 40: return 77; 
break;
case 41: return 78; 
break;
case 42: return 79; 
break;
case 43: return 80; 
break;
case 44: return 81; 
break;
case 45: return 82; 
break;
case 46: return 83; 
break;
case 47: return 84; 
break;
case 48: return 6; 
break;
case 49: return 'ACTION'; 
break;
case 50: return 15; 
break;
case 51: return 34; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:"(\\.|[^"])*")/,/^(?:'(\\.|[^'])*')/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?:&)/,/^(?:\|)/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\+)/,/^(?:-)/,/^(?:~)/,/^(?:!)/,/^(?:\?)/,/^(?:\+\+)/,/^(?:--)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:->)/,/^(?:<-)/,/^(?:@)/,/^(?:<<)/,/^(?:>>)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:<<=)/,/^(?:>>=)/,/^(?:&=)/,/^(?:\^=)/,/^(?:\|=)/,/^(?:state\b)/,/^(?:action\b)/,/^(?:\w+)/,/^(?:[0-9]+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}