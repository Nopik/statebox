/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"graph":3,"states":4,"state":5,"STATE":6,"WORD":7,"state_flags":8,"{":9,"triggers":10,"}":11,"opt_semi":12,"[":13,"flags":14,"]":15,"opt_comma":16,"trigger":17,"TRIG_IN":18,"actions":19,"TRIG_OUT":20,"TRIG_AT":21,"identifier":22,"statement":23,"conditional":24,"=":25,"assignment_expression":26,";":27,"action":28,"?":29,"expression":30,"async_specifier":31,"argument_expression_list":32,"!":33,"NUMBER":34,".":35,",":36,"primary_expression":37,"STRING_LITERAL":38,"(":39,")":40,"postfix_expression":41,"unary_expression":42,"unary_operator":43,"+":44,"-":45,"~":46,"multiplicative_expression":47,"*":48,"/":49,"%":50,"additive_expression":51,"shift_expression":52,"LEFT_OP":53,"RIGHT_OP":54,"relational_expression":55,"<":56,">":57,"LE_OP":58,"GE_OP":59,"equality_expression":60,"EQ_OP":61,"EQQ_OP":62,"NE_OP":63,"NEE_OP":64,"and_expression":65,"&":66,"exclusive_or_expression":67,"^":68,"inclusive_or_expression":69,"|":70,"logical_and_expression":71,"AND_OP":72,"logical_or_expression":73,"OR_OP":74,"assignment_operator":75,"MUL_ASSIGN":76,"DIV_ASSIGN":77,"MOD_ASSIGN":78,"ADD_ASSIGN":79,"SUB_ASSIGN":80,"LEFT_ASSIGN":81,"RIGHT_ASSIGN":82,"AND_ASSIGN":83,"XOR_ASSIGN":84,"OR_ASSIGN":85,"$accept":0,"$end":1},
terminals_: {2:"error",6:"STATE",7:"WORD",9:"{",11:"}",13:"[",15:"]",18:"TRIG_IN",20:"TRIG_OUT",21:"TRIG_AT",25:"=",27:";",29:"?",33:"!",34:"NUMBER",35:".",36:",",38:"STRING_LITERAL",39:"(",40:")",44:"+",45:"-",46:"~",48:"*",49:"/",50:"%",53:"LEFT_OP",54:"RIGHT_OP",56:"<",57:">",58:"LE_OP",59:"GE_OP",61:"EQ_OP",62:"EQQ_OP",63:"NE_OP",64:"NEE_OP",66:"&",68:"^",70:"|",72:"AND_OP",74:"OR_OP",76:"MUL_ASSIGN",77:"DIV_ASSIGN",78:"MOD_ASSIGN",79:"ADD_ASSIGN",80:"SUB_ASSIGN",81:"LEFT_ASSIGN",82:"RIGHT_ASSIGN",83:"AND_ASSIGN",84:"XOR_ASSIGN",85:"OR_ASSIGN"},
productions_: [0,[3,1],[4,1],[4,2],[5,7],[8,0],[8,3],[14,1],[14,3],[10,0],[10,3],[17,4],[17,4],[17,5],[17,7],[17,4],[19,0],[19,2],[23,5],[23,3],[23,2],[24,2],[28,2],[28,3],[31,0],[31,1],[22,1],[22,1],[22,3],[22,3],[12,0],[12,1],[16,0],[16,1],[37,1],[37,1],[37,1],[37,3],[41,1],[41,4],[41,3],[41,4],[41,3],[32,1],[32,3],[42,1],[42,2],[43,1],[43,1],[43,1],[43,1],[47,1],[47,3],[47,3],[47,3],[51,1],[51,3],[51,3],[52,1],[52,3],[52,3],[55,1],[55,3],[55,3],[55,3],[55,3],[60,1],[60,3],[60,3],[60,3],[60,3],[65,1],[65,3],[67,1],[67,3],[69,1],[69,3],[71,1],[71,3],[73,1],[73,3],[26,1],[26,3],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[30,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0]; 
break;
case 2: this.$ = [ $$[$0] ]; 
break;
case 3: this.$ = $$[$0-1].concat( [ $$[$0] ] ); 
break;
case 4: this.$ = new State( $$[$0-5], $$[$0-2].enter, $$[$0-2].leave, $$[$0-2].at, $$[$0-4] ) 
break;
case 5: this.$ = 0; 
break;
case 6: this.$ = $$[$0-1]; 
break;
case 7: this.$ = ParseHelpers.getFlag( $$[$0] ); 
break;
case 8: this.$ = $$[$0-2] + ParseHelpers.getFlag( $$[$0] ); 
break;
case 9: this.$ = { enter: [], leave: [], at: [] }; 
break;
case 10: this.$ = ParseHelpers.joinTriggers( $$[$0-2], $$[$0-1] ); 
break;
case 11: this.$ = { enter: $$[$0-1] }; 
break;
case 12: this.$ = { leave: $$[$0-1] }; 
break;
case 13: this.$ = { at: { at: $$[$0-3], exe: $$[$0-1], to: undefined } }; 
break;
case 14: this.$ = { at: { at: $$[$0-5], exe: $$[$0-1], to: $$[$0-3] } }; 
break;
case 15: this.$ = { at: { at: $$[$0-2], exe: [], to: $$[$0] } }; 
break;
case 16: this.$ = []; 
break;
case 17: this.$ = $$[$0-1].concat( [ $$[$0] ] ); 
break;
case 18: this.$ = new Action.ConditionalAction( $$[$0-4], $$[$0-2] ) 
break;
case 19: this.$ = new Action.ExpressionAction( $$[$0-1] ) 
break;
case 20: this.$ = $$[$0-1]; 
break;
case 21: this.$ = $$[$0]; 
break;
case 22: this.$ = new Action.SimpleAction( $$[$0], [], $$[$0-1] ); 
break;
case 23: this.$ = new Action.SimpleAction( $$[$0-1], $$[$0], $$[$0-2] ) 
break;
case 24: this.$ = false; 
break;
case 25: this.$ = true; 
break;
case 26: this.$ = $$[$0]; 
break;
case 27: this.$ = $$[$0]; 
break;
case 28: this.$ = $$[$0-2] + "." + $$[$0]; 
break;
case 29: this.$ = $$[$0-2] + "." + $$[$0]; 
break;
case 34: this.$ = new Exp.WordLiteralExp( $$[$0] ); 
break;
case 35: this.$ = new Exp.NumberLiteralExp( $$[$0] ); 
break;
case 36: this.$ = new Exp.StringLiteralExp( $$[$0] ); 
break;
case 37: this.$ = $$[$0-1]; 
break;
case 38: this.$ = $$[$0]; 
break;
case 39: this.$ = new Exp.SubscriptExp( $$[$0-3], $$[$0-1] ); 
break;
case 40: this.$ = new Exp.CallExp( $$[$0-2], [] ); 
break;
case 41: this.$ = new Exp.CallExp( $$[$0-3], $$[$0-1] ); 
break;
case 42: this.$ = new Exp.PropExp( $$[$0-2], $$[$0] ); 
break;
case 43: this.$ = [ $$[$0] ]; 
break;
case 44: this.$ = $$[$0-2].concat( [ $$[$0] ] ) 
break;
case 45: this.$ = $$[$0]; 
break;
case 46: this.$ = new Exp.UnaryOpExp( $$[$0-1], $$[$0] ); 
break;
case 51: this.$ = $$[$0]; 
break;
case 52: this.$ = new Exp.OpExp( $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 53: this.$ = new Exp.OpExp( $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 54: this.$ = new Exp.OpExp( $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 55: this.$ = $$[$0]; 
break;
case 56: this.$ = new Exp.OpExp( $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 57: this.$ = new Exp.OpExp( $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 58: this.$ = $$[$0]; 
break;
case 59: this.$ = new Exp.OpExp( $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 60: this.$ = new Exp.OpExp( $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 61: this.$ = $$[$0]; 
break;
case 62: this.$ = new Exp.OpExp( $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 63: this.$ = new Exp.OpExp( $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 64: this.$ = new Exp.OpExp( $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 65: this.$ = new Exp.OpExp( $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 66: this.$ = $$[$0]; 
break;
case 67: this.$ = new Exp.OpExp( $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 68: this.$ = new Exp.OpExp( $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 69: this.$ = new Exp.OpExp( $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 70: this.$ = new Exp.OpExp( $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 71: this.$ = $$[$0]; 
break;
case 72: this.$ = new Exp.OpExp( $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 73: this.$ = $$[$0]; 
break;
case 74: this.$ = new Exp.OpExp( $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 75: this.$ = $$[$0]; 
break;
case 76: this.$ = new Exp.OpExp( $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 77: this.$ = $$[$0]; 
break;
case 78: this.$ = new Exp.OpExp( $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 79: this.$ = $$[$0]; 
break;
case 80: this.$ = new Exp.OpExp( $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 81: this.$ = $$[$0]; 
break;
case 82: this.$ = new Exp.AssignmentExp( $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 94: this.$ = $$[$0]; 
break;
}
},
table: [{3:1,4:2,5:3,6:[1,4]},{1:[3]},{1:[2,1],5:5,6:[1,4]},{1:[2,2],6:[2,2]},{7:[1,6]},{1:[2,3],6:[2,3]},{8:7,9:[2,5],13:[1,8]},{9:[1,9]},{7:[1,11],14:10},{10:12,11:[2,9],18:[2,9],20:[2,9],21:[2,9]},{7:[2,32],15:[1,13],16:14,36:[1,15]},{7:[2,7],15:[2,7],36:[2,7]},{11:[1,16],17:17,18:[1,18],20:[1,19],21:[1,20]},{9:[2,6]},{7:[1,21]},{7:[2,33]},{1:[2,30],6:[2,30],12:22,27:[1,23]},{11:[2,30],12:24,18:[2,30],20:[2,30],21:[2,30],27:[1,23]},{9:[1,25]},{9:[1,26]},{7:[1,28],22:27,34:[1,29]},{7:[2,8],15:[2,8],36:[2,8]},{1:[2,4],6:[2,4]},{1:[2,31],6:[2,31],7:[2,31],11:[2,31],18:[2,31],20:[2,31],21:[2,31],25:[2,31],29:[2,31],33:[2,31]},{11:[2,10],18:[2,10],20:[2,10],21:[2,10]},{7:[2,16],11:[2,16],19:30,25:[2,16],29:[2,16],33:[2,16]},{7:[2,16],11:[2,16],19:31,25:[2,16],29:[2,16],33:[2,16]},{9:[1,32],18:[1,33],35:[1,34]},{9:[2,26],18:[2,26],35:[2,26]},{9:[2,27],18:[2,27],35:[2,27]},{7:[2,24],11:[1,35],23:36,24:37,25:[1,38],28:39,29:[1,40],31:41,33:[1,42]},{7:[2,24],11:[1,43],23:36,24:37,25:[1,38],28:39,29:[1,40],31:41,33:[1,42]},{7:[2,16],11:[2,16],19:44,25:[2,16],29:[2,16],33:[2,16]},{7:[1,45]},{7:[1,47],34:[1,46]},{11:[2,11],18:[2,11],20:[2,11],21:[2,11],27:[2,11]},{7:[2,17],11:[2,17],25:[2,17],29:[2,17],33:[2,17]},{9:[1,48]},{7:[1,62],26:49,30:50,33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:51,43:54,44:[1,57],45:[1,58],46:[1,59],47:72,51:71,52:70,55:69,60:68,65:67,67:66,69:61,71:55,73:52},{27:[1,73]},{7:[1,62],30:74,33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:75,43:54,44:[1,57],45:[1,58],46:[1,59],47:72,51:71,52:70,55:69,60:68,65:67,67:66,69:61,71:55,73:52},{7:[1,76]},{7:[2,25]},{11:[2,12],18:[2,12],20:[2,12],21:[2,12],27:[2,12]},{7:[2,24],11:[1,77],23:36,24:37,25:[1,38],28:39,29:[1,40],31:41,33:[1,42]},{9:[1,78],11:[2,15],18:[2,15],20:[2,15],21:[2,15],27:[2,15]},{9:[2,28],18:[2,28],35:[2,28]},{9:[2,29],18:[2,29],35:[2,29]},{7:[2,16],11:[2,16],19:79,25:[2,16],29:[2,16],33:[2,16]},{27:[1,80]},{27:[2,81]},{25:[1,82],27:[2,51],44:[2,51],45:[2,51],48:[2,51],49:[2,51],50:[2,51],53:[2,51],54:[2,51],56:[2,51],57:[2,51],58:[2,51],59:[2,51],61:[2,51],62:[2,51],63:[2,51],64:[2,51],66:[2,51],68:[2,51],70:[2,51],72:[2,51],74:[2,51],75:81,76:[1,83],77:[1,84],78:[1,85],79:[1,86],80:[1,87],81:[1,88],82:[1,89],83:[1,90],84:[1,91],85:[1,92]},{9:[2,94],15:[2,94],27:[2,94],36:[2,94],40:[2,94],74:[1,93]},{9:[2,45],13:[1,94],15:[2,45],25:[2,45],27:[2,45],35:[1,96],36:[2,45],39:[1,95],40:[2,45],44:[2,45],45:[2,45],48:[2,45],49:[2,45],50:[2,45],53:[2,45],54:[2,45],56:[2,45],57:[2,45],58:[2,45],59:[2,45],61:[2,45],62:[2,45],63:[2,45],64:[2,45],66:[2,45],68:[2,45],70:[2,45],72:[2,45],74:[2,45],76:[2,45],77:[2,45],78:[2,45],79:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45]},{7:[1,62],33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:97,43:54,44:[1,57],45:[1,58],46:[1,59]},{9:[2,79],15:[2,79],27:[2,79],36:[2,79],40:[2,79],72:[1,98],74:[2,79]},{9:[2,38],13:[2,38],15:[2,38],25:[2,38],27:[2,38],35:[2,38],36:[2,38],39:[2,38],40:[2,38],44:[2,38],45:[2,38],48:[2,38],49:[2,38],50:[2,38],53:[2,38],54:[2,38],56:[2,38],57:[2,38],58:[2,38],59:[2,38],61:[2,38],62:[2,38],63:[2,38],64:[2,38],66:[2,38],68:[2,38],70:[2,38],72:[2,38],74:[2,38],76:[2,38],77:[2,38],78:[2,38],79:[2,38],80:[2,38],81:[2,38],82:[2,38],83:[2,38],84:[2,38],85:[2,38]},{7:[2,47],33:[2,47],34:[2,47],38:[2,47],39:[2,47],44:[2,47],45:[2,47],46:[2,47]},{7:[2,48],33:[2,48],34:[2,48],38:[2,48],39:[2,48],44:[2,48],45:[2,48],46:[2,48]},{7:[2,49],33:[2,49],34:[2,49],38:[2,49],39:[2,49],44:[2,49],45:[2,49],46:[2,49]},{7:[2,50],33:[2,50],34:[2,50],38:[2,50],39:[2,50],44:[2,50],45:[2,50],46:[2,50]},{9:[2,77],15:[2,77],27:[2,77],36:[2,77],40:[2,77],70:[1,99],72:[2,77],74:[2,77]},{9:[2,34],13:[2,34],15:[2,34],25:[2,34],27:[2,34],35:[2,34],36:[2,34],39:[2,34],40:[2,34],44:[2,34],45:[2,34],48:[2,34],49:[2,34],50:[2,34],53:[2,34],54:[2,34],56:[2,34],57:[2,34],58:[2,34],59:[2,34],61:[2,34],62:[2,34],63:[2,34],64:[2,34],66:[2,34],68:[2,34],70:[2,34],72:[2,34],74:[2,34],76:[2,34],77:[2,34],78:[2,34],79:[2,34],80:[2,34],81:[2,34],82:[2,34],83:[2,34],84:[2,34],85:[2,34]},{9:[2,35],13:[2,35],15:[2,35],25:[2,35],27:[2,35],35:[2,35],36:[2,35],39:[2,35],40:[2,35],44:[2,35],45:[2,35],48:[2,35],49:[2,35],50:[2,35],53:[2,35],54:[2,35],56:[2,35],57:[2,35],58:[2,35],59:[2,35],61:[2,35],62:[2,35],63:[2,35],64:[2,35],66:[2,35],68:[2,35],70:[2,35],72:[2,35],74:[2,35],76:[2,35],77:[2,35],78:[2,35],79:[2,35],80:[2,35],81:[2,35],82:[2,35],83:[2,35],84:[2,35],85:[2,35]},{9:[2,36],13:[2,36],15:[2,36],25:[2,36],27:[2,36],35:[2,36],36:[2,36],39:[2,36],40:[2,36],44:[2,36],45:[2,36],48:[2,36],49:[2,36],50:[2,36],53:[2,36],54:[2,36],56:[2,36],57:[2,36],58:[2,36],59:[2,36],61:[2,36],62:[2,36],63:[2,36],64:[2,36],66:[2,36],68:[2,36],70:[2,36],72:[2,36],74:[2,36],76:[2,36],77:[2,36],78:[2,36],79:[2,36],80:[2,36],81:[2,36],82:[2,36],83:[2,36],84:[2,36],85:[2,36]},{7:[1,62],30:100,33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:75,43:54,44:[1,57],45:[1,58],46:[1,59],47:72,51:71,52:70,55:69,60:68,65:67,67:66,69:61,71:55,73:52},{9:[2,75],15:[2,75],27:[2,75],36:[2,75],40:[2,75],68:[1,101],70:[2,75],72:[2,75],74:[2,75]},{9:[2,73],15:[2,73],27:[2,73],36:[2,73],40:[2,73],66:[1,102],68:[2,73],70:[2,73],72:[2,73],74:[2,73]},{9:[2,71],15:[2,71],27:[2,71],36:[2,71],40:[2,71],61:[1,103],62:[1,104],63:[1,105],64:[1,106],66:[2,71],68:[2,71],70:[2,71],72:[2,71],74:[2,71]},{9:[2,66],15:[2,66],27:[2,66],36:[2,66],40:[2,66],56:[1,107],57:[1,108],58:[1,109],59:[1,110],61:[2,66],62:[2,66],63:[2,66],64:[2,66],66:[2,66],68:[2,66],70:[2,66],72:[2,66],74:[2,66]},{9:[2,61],15:[2,61],27:[2,61],36:[2,61],40:[2,61],53:[1,111],54:[1,112],56:[2,61],57:[2,61],58:[2,61],59:[2,61],61:[2,61],62:[2,61],63:[2,61],64:[2,61],66:[2,61],68:[2,61],70:[2,61],72:[2,61],74:[2,61]},{9:[2,58],15:[2,58],27:[2,58],36:[2,58],40:[2,58],44:[1,113],45:[1,114],53:[2,58],54:[2,58],56:[2,58],57:[2,58],58:[2,58],59:[2,58],61:[2,58],62:[2,58],63:[2,58],64:[2,58],66:[2,58],68:[2,58],70:[2,58],72:[2,58],74:[2,58]},{9:[2,55],15:[2,55],27:[2,55],36:[2,55],40:[2,55],44:[2,55],45:[2,55],48:[1,115],49:[1,116],50:[1,117],53:[2,55],54:[2,55],56:[2,55],57:[2,55],58:[2,55],59:[2,55],61:[2,55],62:[2,55],63:[2,55],64:[2,55],66:[2,55],68:[2,55],70:[2,55],72:[2,55],74:[2,55]},{7:[2,20],11:[2,20],25:[2,20],29:[2,20],33:[2,20]},{9:[2,21]},{9:[2,51],15:[2,51],27:[2,51],36:[2,51],40:[2,51],44:[2,51],45:[2,51],48:[2,51],49:[2,51],50:[2,51],53:[2,51],54:[2,51],56:[2,51],57:[2,51],58:[2,51],59:[2,51],61:[2,51],62:[2,51],63:[2,51],64:[2,51],66:[2,51],68:[2,51],70:[2,51],72:[2,51],74:[2,51]},{7:[1,62],27:[2,22],30:119,32:118,33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:75,43:54,44:[1,57],45:[1,58],46:[1,59],47:72,51:71,52:70,55:69,60:68,65:67,67:66,69:61,71:55,73:52},{11:[2,13],18:[2,13],20:[2,13],21:[2,13],27:[2,13]},{7:[2,16],11:[2,16],19:120,25:[2,16],29:[2,16],33:[2,16]},{7:[2,24],11:[1,121],23:36,24:37,25:[1,38],28:39,29:[1,40],31:41,33:[1,42]},{7:[2,19],11:[2,19],25:[2,19],29:[2,19],33:[2,19]},{7:[1,62],26:122,30:50,33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:51,43:54,44:[1,57],45:[1,58],46:[1,59],47:72,51:71,52:70,55:69,60:68,65:67,67:66,69:61,71:55,73:52},{7:[2,83],33:[2,83],34:[2,83],38:[2,83],39:[2,83],44:[2,83],45:[2,83],46:[2,83]},{7:[2,84],33:[2,84],34:[2,84],38:[2,84],39:[2,84],44:[2,84],45:[2,84],46:[2,84]},{7:[2,85],33:[2,85],34:[2,85],38:[2,85],39:[2,85],44:[2,85],45:[2,85],46:[2,85]},{7:[2,86],33:[2,86],34:[2,86],38:[2,86],39:[2,86],44:[2,86],45:[2,86],46:[2,86]},{7:[2,87],33:[2,87],34:[2,87],38:[2,87],39:[2,87],44:[2,87],45:[2,87],46:[2,87]},{7:[2,88],33:[2,88],34:[2,88],38:[2,88],39:[2,88],44:[2,88],45:[2,88],46:[2,88]},{7:[2,89],33:[2,89],34:[2,89],38:[2,89],39:[2,89],44:[2,89],45:[2,89],46:[2,89]},{7:[2,90],33:[2,90],34:[2,90],38:[2,90],39:[2,90],44:[2,90],45:[2,90],46:[2,90]},{7:[2,91],33:[2,91],34:[2,91],38:[2,91],39:[2,91],44:[2,91],45:[2,91],46:[2,91]},{7:[2,92],33:[2,92],34:[2,92],38:[2,92],39:[2,92],44:[2,92],45:[2,92],46:[2,92]},{7:[2,93],33:[2,93],34:[2,93],38:[2,93],39:[2,93],44:[2,93],45:[2,93],46:[2,93]},{7:[1,62],33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:75,43:54,44:[1,57],45:[1,58],46:[1,59],47:72,51:71,52:70,55:69,60:68,65:67,67:66,69:61,71:123},{7:[1,62],30:124,33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:75,43:54,44:[1,57],45:[1,58],46:[1,59],47:72,51:71,52:70,55:69,60:68,65:67,67:66,69:61,71:55,73:52},{7:[1,62],30:119,32:126,33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],40:[1,125],41:53,42:75,43:54,44:[1,57],45:[1,58],46:[1,59],47:72,51:71,52:70,55:69,60:68,65:67,67:66,69:61,71:55,73:52},{7:[1,127]},{9:[2,46],15:[2,46],25:[2,46],27:[2,46],36:[2,46],40:[2,46],44:[2,46],45:[2,46],48:[2,46],49:[2,46],50:[2,46],53:[2,46],54:[2,46],56:[2,46],57:[2,46],58:[2,46],59:[2,46],61:[2,46],62:[2,46],63:[2,46],64:[2,46],66:[2,46],68:[2,46],70:[2,46],72:[2,46],74:[2,46],76:[2,46],77:[2,46],78:[2,46],79:[2,46],80:[2,46],81:[2,46],82:[2,46],83:[2,46],84:[2,46],85:[2,46]},{7:[1,62],33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:75,43:54,44:[1,57],45:[1,58],46:[1,59],47:72,51:71,52:70,55:69,60:68,65:67,67:66,69:128},{7:[1,62],33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:75,43:54,44:[1,57],45:[1,58],46:[1,59],47:72,51:71,52:70,55:69,60:68,65:67,67:129},{40:[1,130]},{7:[1,62],33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:75,43:54,44:[1,57],45:[1,58],46:[1,59],47:72,51:71,52:70,55:69,60:68,65:131},{7:[1,62],33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:75,43:54,44:[1,57],45:[1,58],46:[1,59],47:72,51:71,52:70,55:69,60:132},{7:[1,62],33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:75,43:54,44:[1,57],45:[1,58],46:[1,59],47:72,51:71,52:70,55:133},{7:[1,62],33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:75,43:54,44:[1,57],45:[1,58],46:[1,59],47:72,51:71,52:70,55:134},{7:[1,62],33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:75,43:54,44:[1,57],45:[1,58],46:[1,59],47:72,51:71,52:70,55:135},{7:[1,62],33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:75,43:54,44:[1,57],45:[1,58],46:[1,59],47:72,51:71,52:70,55:136},{7:[1,62],33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:75,43:54,44:[1,57],45:[1,58],46:[1,59],47:72,51:71,52:137},{7:[1,62],33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:75,43:54,44:[1,57],45:[1,58],46:[1,59],47:72,51:71,52:138},{7:[1,62],33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:75,43:54,44:[1,57],45:[1,58],46:[1,59],47:72,51:71,52:139},{7:[1,62],33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:75,43:54,44:[1,57],45:[1,58],46:[1,59],47:72,51:71,52:140},{7:[1,62],33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:75,43:54,44:[1,57],45:[1,58],46:[1,59],47:72,51:141},{7:[1,62],33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:75,43:54,44:[1,57],45:[1,58],46:[1,59],47:72,51:142},{7:[1,62],33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:75,43:54,44:[1,57],45:[1,58],46:[1,59],47:143},{7:[1,62],33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:75,43:54,44:[1,57],45:[1,58],46:[1,59],47:144},{7:[1,62],33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:145,43:54,44:[1,57],45:[1,58],46:[1,59]},{7:[1,62],33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:146,43:54,44:[1,57],45:[1,58],46:[1,59]},{7:[1,62],33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:147,43:54,44:[1,57],45:[1,58],46:[1,59]},{27:[2,23],36:[1,148]},{27:[2,43],36:[2,43],40:[2,43]},{7:[2,24],11:[1,149],23:36,24:37,25:[1,38],28:39,29:[1,40],31:41,33:[1,42]},{7:[2,30],11:[2,30],12:150,25:[2,30],27:[1,23],29:[2,30],33:[2,30]},{27:[2,82]},{9:[2,80],15:[2,80],27:[2,80],36:[2,80],40:[2,80],72:[1,98],74:[2,80]},{15:[1,151]},{9:[2,40],13:[2,40],15:[2,40],25:[2,40],27:[2,40],35:[2,40],36:[2,40],39:[2,40],40:[2,40],44:[2,40],45:[2,40],48:[2,40],49:[2,40],50:[2,40],53:[2,40],54:[2,40],56:[2,40],57:[2,40],58:[2,40],59:[2,40],61:[2,40],62:[2,40],63:[2,40],64:[2,40],66:[2,40],68:[2,40],70:[2,40],72:[2,40],74:[2,40],76:[2,40],77:[2,40],78:[2,40],79:[2,40],80:[2,40],81:[2,40],82:[2,40],83:[2,40],84:[2,40],85:[2,40]},{36:[1,148],40:[1,152]},{9:[2,42],13:[2,42],15:[2,42],25:[2,42],27:[2,42],35:[2,42],36:[2,42],39:[2,42],40:[2,42],44:[2,42],45:[2,42],48:[2,42],49:[2,42],50:[2,42],53:[2,42],54:[2,42],56:[2,42],57:[2,42],58:[2,42],59:[2,42],61:[2,42],62:[2,42],63:[2,42],64:[2,42],66:[2,42],68:[2,42],70:[2,42],72:[2,42],74:[2,42],76:[2,42],77:[2,42],78:[2,42],79:[2,42],80:[2,42],81:[2,42],82:[2,42],83:[2,42],84:[2,42],85:[2,42]},{9:[2,78],15:[2,78],27:[2,78],36:[2,78],40:[2,78],70:[1,99],72:[2,78],74:[2,78]},{9:[2,76],15:[2,76],27:[2,76],36:[2,76],40:[2,76],68:[1,101],70:[2,76],72:[2,76],74:[2,76]},{9:[2,37],13:[2,37],15:[2,37],25:[2,37],27:[2,37],35:[2,37],36:[2,37],39:[2,37],40:[2,37],44:[2,37],45:[2,37],48:[2,37],49:[2,37],50:[2,37],53:[2,37],54:[2,37],56:[2,37],57:[2,37],58:[2,37],59:[2,37],61:[2,37],62:[2,37],63:[2,37],64:[2,37],66:[2,37],68:[2,37],70:[2,37],72:[2,37],74:[2,37],76:[2,37],77:[2,37],78:[2,37],79:[2,37],80:[2,37],81:[2,37],82:[2,37],83:[2,37],84:[2,37],85:[2,37]},{9:[2,74],15:[2,74],27:[2,74],36:[2,74],40:[2,74],66:[1,102],68:[2,74],70:[2,74],72:[2,74],74:[2,74]},{9:[2,72],15:[2,72],27:[2,72],36:[2,72],40:[2,72],61:[1,103],62:[1,104],63:[1,105],64:[1,106],66:[2,72],68:[2,72],70:[2,72],72:[2,72],74:[2,72]},{9:[2,67],15:[2,67],27:[2,67],36:[2,67],40:[2,67],56:[1,107],57:[1,108],58:[1,109],59:[1,110],61:[2,67],62:[2,67],63:[2,67],64:[2,67],66:[2,67],68:[2,67],70:[2,67],72:[2,67],74:[2,67]},{9:[2,68],15:[2,68],27:[2,68],36:[2,68],40:[2,68],56:[1,107],57:[1,108],58:[1,109],59:[1,110],61:[2,68],62:[2,68],63:[2,68],64:[2,68],66:[2,68],68:[2,68],70:[2,68],72:[2,68],74:[2,68]},{9:[2,69],15:[2,69],27:[2,69],36:[2,69],40:[2,69],56:[1,107],57:[1,108],58:[1,109],59:[1,110],61:[2,69],62:[2,69],63:[2,69],64:[2,69],66:[2,69],68:[2,69],70:[2,69],72:[2,69],74:[2,69]},{9:[2,70],15:[2,70],27:[2,70],36:[2,70],40:[2,70],56:[1,107],57:[1,108],58:[1,109],59:[1,110],61:[2,70],62:[2,70],63:[2,70],64:[2,70],66:[2,70],68:[2,70],70:[2,70],72:[2,70],74:[2,70]},{9:[2,62],15:[2,62],27:[2,62],36:[2,62],40:[2,62],53:[1,111],54:[1,112],56:[2,62],57:[2,62],58:[2,62],59:[2,62],61:[2,62],62:[2,62],63:[2,62],64:[2,62],66:[2,62],68:[2,62],70:[2,62],72:[2,62],74:[2,62]},{9:[2,63],15:[2,63],27:[2,63],36:[2,63],40:[2,63],53:[1,111],54:[1,112],56:[2,63],57:[2,63],58:[2,63],59:[2,63],61:[2,63],62:[2,63],63:[2,63],64:[2,63],66:[2,63],68:[2,63],70:[2,63],72:[2,63],74:[2,63]},{9:[2,64],15:[2,64],27:[2,64],36:[2,64],40:[2,64],53:[1,111],54:[1,112],56:[2,64],57:[2,64],58:[2,64],59:[2,64],61:[2,64],62:[2,64],63:[2,64],64:[2,64],66:[2,64],68:[2,64],70:[2,64],72:[2,64],74:[2,64]},{9:[2,65],15:[2,65],27:[2,65],36:[2,65],40:[2,65],53:[1,111],54:[1,112],56:[2,65],57:[2,65],58:[2,65],59:[2,65],61:[2,65],62:[2,65],63:[2,65],64:[2,65],66:[2,65],68:[2,65],70:[2,65],72:[2,65],74:[2,65]},{9:[2,59],15:[2,59],27:[2,59],36:[2,59],40:[2,59],44:[1,113],45:[1,114],53:[2,59],54:[2,59],56:[2,59],57:[2,59],58:[2,59],59:[2,59],61:[2,59],62:[2,59],63:[2,59],64:[2,59],66:[2,59],68:[2,59],70:[2,59],72:[2,59],74:[2,59]},{9:[2,60],15:[2,60],27:[2,60],36:[2,60],40:[2,60],44:[1,113],45:[1,114],53:[2,60],54:[2,60],56:[2,60],57:[2,60],58:[2,60],59:[2,60],61:[2,60],62:[2,60],63:[2,60],64:[2,60],66:[2,60],68:[2,60],70:[2,60],72:[2,60],74:[2,60]},{9:[2,56],15:[2,56],27:[2,56],36:[2,56],40:[2,56],44:[2,56],45:[2,56],48:[1,115],49:[1,116],50:[1,117],53:[2,56],54:[2,56],56:[2,56],57:[2,56],58:[2,56],59:[2,56],61:[2,56],62:[2,56],63:[2,56],64:[2,56],66:[2,56],68:[2,56],70:[2,56],72:[2,56],74:[2,56]},{9:[2,57],15:[2,57],27:[2,57],36:[2,57],40:[2,57],44:[2,57],45:[2,57],48:[1,115],49:[1,116],50:[1,117],53:[2,57],54:[2,57],56:[2,57],57:[2,57],58:[2,57],59:[2,57],61:[2,57],62:[2,57],63:[2,57],64:[2,57],66:[2,57],68:[2,57],70:[2,57],72:[2,57],74:[2,57]},{9:[2,52],15:[2,52],27:[2,52],36:[2,52],40:[2,52],44:[2,52],45:[2,52],48:[2,52],49:[2,52],50:[2,52],53:[2,52],54:[2,52],56:[2,52],57:[2,52],58:[2,52],59:[2,52],61:[2,52],62:[2,52],63:[2,52],64:[2,52],66:[2,52],68:[2,52],70:[2,52],72:[2,52],74:[2,52]},{9:[2,53],15:[2,53],27:[2,53],36:[2,53],40:[2,53],44:[2,53],45:[2,53],48:[2,53],49:[2,53],50:[2,53],53:[2,53],54:[2,53],56:[2,53],57:[2,53],58:[2,53],59:[2,53],61:[2,53],62:[2,53],63:[2,53],64:[2,53],66:[2,53],68:[2,53],70:[2,53],72:[2,53],74:[2,53]},{9:[2,54],15:[2,54],27:[2,54],36:[2,54],40:[2,54],44:[2,54],45:[2,54],48:[2,54],49:[2,54],50:[2,54],53:[2,54],54:[2,54],56:[2,54],57:[2,54],58:[2,54],59:[2,54],61:[2,54],62:[2,54],63:[2,54],64:[2,54],66:[2,54],68:[2,54],70:[2,54],72:[2,54],74:[2,54]},{7:[1,62],30:153,33:[1,60],34:[1,63],37:56,38:[1,64],39:[1,65],41:53,42:75,43:54,44:[1,57],45:[1,58],46:[1,59],47:72,51:71,52:70,55:69,60:68,65:67,67:66,69:61,71:55,73:52},{11:[2,14],18:[2,14],20:[2,14],21:[2,14],27:[2,14]},{7:[2,18],11:[2,18],25:[2,18],29:[2,18],33:[2,18]},{9:[2,39],13:[2,39],15:[2,39],25:[2,39],27:[2,39],35:[2,39],36:[2,39],39:[2,39],40:[2,39],44:[2,39],45:[2,39],48:[2,39],49:[2,39],50:[2,39],53:[2,39],54:[2,39],56:[2,39],57:[2,39],58:[2,39],59:[2,39],61:[2,39],62:[2,39],63:[2,39],64:[2,39],66:[2,39],68:[2,39],70:[2,39],72:[2,39],74:[2,39],76:[2,39],77:[2,39],78:[2,39],79:[2,39],80:[2,39],81:[2,39],82:[2,39],83:[2,39],84:[2,39],85:[2,39]},{9:[2,41],13:[2,41],15:[2,41],25:[2,41],27:[2,41],35:[2,41],36:[2,41],39:[2,41],40:[2,41],44:[2,41],45:[2,41],48:[2,41],49:[2,41],50:[2,41],53:[2,41],54:[2,41],56:[2,41],57:[2,41],58:[2,41],59:[2,41],61:[2,41],62:[2,41],63:[2,41],64:[2,41],66:[2,41],68:[2,41],70:[2,41],72:[2,41],74:[2,41],76:[2,41],77:[2,41],78:[2,41],79:[2,41],80:[2,41],81:[2,41],82:[2,41],83:[2,41],84:[2,41],85:[2,41]},{27:[2,44],36:[2,44],40:[2,44]}],
defaultActions: {13:[2,6],15:[2,33],42:[2,25],50:[2,81],74:[2,21],122:[2,82]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

Exp = require('../lib/exp');
Action = require('../lib/action');
State = require('../lib/state');
ParseHelpers = require('./parse_helpers');
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
/**/) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1: return 38; 
break;
case 2: return 38; 
break;
case 3:
break;
case 4: return 81; 
break;
case 5: return 82; 
break;
case 6: return 18; 
break;
case 7: return 20; 
break;
case 8: return 58; 
break;
case 9: return 59; 
break;
case 10: return 62; 
break;
case 11: return 61; 
break;
case 12: return 64; 
break;
case 13: return 63; 
break;
case 14: return 72; 
break;
case 15: return 74; 
break;
case 16: return 53; 
break;
case 17: return 54; 
break;
case 18: return 76; 
break;
case 19: return 77; 
break;
case 20: return 78; 
break;
case 21: return 79; 
break;
case 22: return 80; 
break;
case 23: return 83; 
break;
case 24: return 84; 
break;
case 25: return 85; 
break;
case 26: return 21; 
break;
case 27: return 13; 
break;
case 28: return 15; 
break;
case 29: return 39; 
break;
case 30: return 40; 
break;
case 31: return 9; 
break;
case 32: return 11; 
break;
case 33: return 56; 
break;
case 34: return 57; 
break;
case 35: return 36; 
break;
case 36: return 27; 
break;
case 37: return 35; 
break;
case 38: return 25; 
break;
case 39: return 66; 
break;
case 40: return 70; 
break;
case 41: return 68; 
break;
case 42: return 48; 
break;
case 43: return 49; 
break;
case 44: return 50; 
break;
case 45: return 44; 
break;
case 46: return 45; 
break;
case 47: return 46; 
break;
case 48: return 33; 
break;
case 49: return 29; 
break;
case 50: return 6; 
break;
case 51: return 34; 
break;
case 52: return 7; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:"(\\.|[^"])*")/,/^(?:'(\\.|[^'])*')/,/^(?:#[^\n]*\n)/,/^(?:<<=)/,/^(?:>>=)/,/^(?:->)/,/^(?:<-)/,/^(?:<=)/,/^(?:>=)/,/^(?:===)/,/^(?:==)/,/^(?:!==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<<)/,/^(?:>>)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:&=)/,/^(?:\^=)/,/^(?:\|=)/,/^(?:@)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:<)/,/^(?:>)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?:=)/,/^(?:&)/,/^(?:\|)/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\+)/,/^(?:-)/,/^(?:~)/,/^(?:!)/,/^(?:\?)/,/^(?:state\b)/,/^(?:[0-9]+)/,/^(?:\w+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}