/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"graph":3,"states":4,"state":5,"STATE":6,"WORD":7,"state_flags":8,"{":9,"triggers":10,"}":11,"opt_semi":12,"[":13,"flags":14,"]":15,",":16,"trigger":17,"TRIG_IN":18,"actions":19,"TRIG_OUT":20,"TRIG_AT":21,"identifier":22,"statement":23,";":24,"conditional":25,"=":26,"assignment_expression":27,"action":28,"?":29,"expression":30,"async_specifier":31,"argument_expression_list":32,"!":33,".":34,"primary_expression":35,"NUMBER":36,"STRING_LITERAL":37,"(":38,")":39,"postfix_expression":40,"unary_expression":41,"unary_operator":42,"&":43,"*":44,"+":45,"-":46,"~":47,"multiplicative_expression":48,"/":49,"%":50,"additive_expression":51,"shift_expression":52,"LEFT_OP":53,"RIGHT_OP":54,"relational_expression":55,"<":56,">":57,"LE_OP":58,"GE_OP":59,"equality_expression":60,"EQ_OP":61,"NE_OP":62,"and_expression":63,"exclusive_or_expression":64,"^":65,"inclusive_or_expression":66,"|":67,"logical_and_expression":68,"AND_OP":69,"logical_or_expression":70,"OR_OP":71,"assignment_operator":72,"MUL_ASSIGN":73,"DIV_ASSIGN":74,"MOD_ASSIGN":75,"ADD_ASSIGN":76,"SUB_ASSIGN":77,"LEFT_ASSIGN":78,"RIGHT_ASSIGN":79,"AND_ASSIGN":80,"XOR_ASSIGN":81,"OR_ASSIGN":82,"$accept":0,"$end":1},
terminals_: {2:"error",6:"STATE",7:"WORD",9:"{",11:"}",13:"[",15:"]",16:",",18:"TRIG_IN",20:"TRIG_OUT",21:"TRIG_AT",24:";",26:"=",29:"?",33:"!",34:".",36:"NUMBER",37:"STRING_LITERAL",38:"(",39:")",43:"&",44:"*",45:"+",46:"-",47:"~",49:"/",50:"%",53:"LEFT_OP",54:"RIGHT_OP",56:"<",57:">",58:"LE_OP",59:"GE_OP",61:"EQ_OP",62:"NE_OP",65:"^",67:"|",69:"AND_OP",71:"OR_OP",73:"MUL_ASSIGN",74:"DIV_ASSIGN",75:"MOD_ASSIGN",76:"ADD_ASSIGN",77:"SUB_ASSIGN",78:"LEFT_ASSIGN",79:"RIGHT_ASSIGN",80:"AND_ASSIGN",81:"XOR_ASSIGN",82:"OR_ASSIGN"},
productions_: [0,[3,1],[4,1],[4,2],[5,7],[8,0],[8,3],[14,1],[14,3],[10,0],[10,2],[17,4],[17,4],[17,5],[19,0],[19,3],[23,4],[23,2],[23,1],[25,2],[28,2],[28,3],[31,0],[31,1],[22,1],[22,3],[12,0],[12,1],[35,1],[35,1],[35,1],[35,3],[40,1],[40,4],[40,3],[40,4],[40,3],[32,1],[32,3],[41,1],[41,2],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[48,1],[48,3],[48,3],[48,3],[51,1],[51,3],[51,3],[52,1],[52,3],[52,3],[55,1],[55,3],[55,3],[55,3],[55,3],[60,1],[60,3],[60,3],[63,1],[63,3],[64,1],[64,3],[66,1],[66,3],[68,1],[68,3],[70,1],[70,3],[27,1],[27,3],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[30,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0]; 
break;
case 2: this.$ = [ $$[$0] ]; 
break;
case 3: this.$ = $$[$0-1].concat( [ $$[$0] ] ); 
break;
case 4: this.$ = new StateBox.State( $$[$0-5], $$[$0-2].enter, $$[$0-2].leave, $$[$0-2].at, $$[$0-4] ) 
break;
case 5: this.$ = 0; 
break;
case 6: this.$ = $$[$0-1]; 
break;
case 7: this.$ = ParseHelpers.getFlag( $$[$0] ); 
break;
case 8: this.$ = $$[$0-2] + ParseHelpers.getFlag( $$[$0] ); 
break;
case 9: this.$ = { enter: [], leave: [], at: [] }; 
break;
case 10: this.$ = ParseHelpers.joinTriggers( $$[$0-1], $$[$0] ); 
break;
case 11: this.$ = { enter: $$[$0-1] }; 
break;
case 12: this.$ = { leave: $$[$0-1] }; 
break;
case 13: res = { at: { at: $$[$0-3], exe: $$[$0-1] } }; this.$ = res; 
break;
case 14: this.$ = []; 
break;
case 15: this.$ = $$[$0-2].concat( [ $$[$0-1] ] ); 
break;
case 16: this.$ = new StateBox.Action.ConditionalAction( $$[$0-3], $$[$0-1] ) 
break;
case 17: this.$ = new StateBox.Action.ExpressionAction( $$[$0] ) 
break;
case 18: this.$ = $$[$0]; 
break;
case 19: this.$ = $$[$0]; 
break;
case 20: this.$ = new StateBox.Action.SimpleAction( $$[$0], [], $$[$0-1] ); 
break;
case 21: this.$ = new StateBox.Action.SimpleAction( $$[$0-1], $$[$0], $$[$0-2] ) 
break;
case 22: this.$ = false; 
break;
case 23: this.$ = true; 
break;
case 24: this.$ = [ $$[$0] ]; 
break;
case 25: this.$ = $$[$0-2].concat( [ $$[$0] ] ) 
break;
case 37: this.$ = [ $$[$0] ]; 
break;
case 38: this.$ = $$[$0-2].concat( [ $$[$0] ] ) 
break;
}
},
table: [{3:1,4:2,5:3,6:[1,4]},{1:[3]},{1:[2,1],5:5,6:[1,4]},{1:[2,2],6:[2,2]},{7:[1,6]},{1:[2,3],6:[2,3]},{8:7,9:[2,5],13:[1,8]},{9:[1,9]},{7:[1,11],14:10},{10:12,11:[2,9],18:[2,9],20:[2,9],21:[2,9]},{15:[1,13],16:[1,14]},{15:[2,7],16:[2,7]},{11:[1,15],17:16,18:[1,17],20:[1,18],21:[1,19]},{9:[2,6]},{7:[1,20]},{1:[2,26],6:[2,26],12:21,24:[1,22]},{11:[2,10],18:[2,10],20:[2,10],21:[2,10]},{9:[1,23]},{9:[1,24]},{7:[1,26],22:25},{15:[2,8],16:[2,8]},{1:[2,4],6:[2,4]},{1:[2,27],6:[2,27]},{7:[2,14],11:[2,14],19:27,26:[2,14],29:[2,14],33:[2,14]},{7:[2,14],11:[2,14],19:28,26:[2,14],29:[2,14],33:[2,14]},{9:[1,29],34:[1,30]},{9:[2,24],34:[2,24]},{7:[2,22],11:[1,31],23:32,25:33,26:[1,34],28:35,29:[1,36],31:37,33:[1,38]},{7:[2,22],11:[1,39],23:32,25:33,26:[1,34],28:35,29:[1,36],31:37,33:[1,38]},{7:[2,14],11:[2,14],19:40,26:[2,14],29:[2,14],33:[2,14]},{7:[1,41]},{11:[2,11],18:[2,11],20:[2,11],21:[2,11]},{24:[1,42]},{9:[1,43]},{7:[1,59],27:44,33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:46,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56],48:68,51:67,52:66,55:65,60:64,63:63,64:58,66:50,68:47,70:45},{24:[2,18]},{7:[1,59],30:69,33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:71,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56],48:68,51:67,52:66,55:65,60:64,63:63,64:58,66:50,68:47,70:70},{7:[1,72]},{7:[2,23]},{11:[2,12],18:[2,12],20:[2,12],21:[2,12]},{7:[2,22],11:[1,73],23:32,25:33,26:[1,34],28:35,29:[1,36],31:37,33:[1,38]},{9:[2,25],34:[2,25]},{7:[2,15],11:[2,15],26:[2,15],29:[2,15],33:[2,15]},{7:[2,14],11:[2,14],19:74,26:[2,14],29:[2,14],33:[2,14]},{24:[2,17]},{24:[2,75],71:[1,75]},{24:[2,47],26:[1,77],43:[2,47],44:[2,47],45:[2,47],46:[2,47],49:[2,47],50:[2,47],53:[2,47],54:[2,47],56:[2,47],57:[2,47],58:[2,47],59:[2,47],61:[2,47],62:[2,47],65:[2,47],67:[2,47],69:[2,47],71:[2,47],72:76,73:[1,78],74:[1,79],75:[1,80],76:[1,81],77:[1,82],78:[1,83],79:[1,84],80:[1,85],81:[1,86],82:[1,87]},{9:[2,73],15:[2,73],16:[2,73],24:[2,73],39:[2,73],69:[1,88],71:[2,73]},{9:[2,39],13:[1,89],15:[2,39],16:[2,39],24:[2,39],26:[2,39],34:[1,91],38:[1,90],39:[2,39],43:[2,39],44:[2,39],45:[2,39],46:[2,39],49:[2,39],50:[2,39],53:[2,39],54:[2,39],56:[2,39],57:[2,39],58:[2,39],59:[2,39],61:[2,39],62:[2,39],65:[2,39],67:[2,39],69:[2,39],71:[2,39],73:[2,39],74:[2,39],75:[2,39],76:[2,39],77:[2,39],78:[2,39],79:[2,39],80:[2,39],81:[2,39],82:[2,39]},{7:[1,59],33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:92,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56]},{9:[2,71],15:[2,71],16:[2,71],24:[2,71],39:[2,71],67:[1,93],69:[2,71],71:[2,71]},{9:[2,32],13:[2,32],15:[2,32],16:[2,32],24:[2,32],26:[2,32],34:[2,32],38:[2,32],39:[2,32],43:[2,32],44:[2,32],45:[2,32],46:[2,32],49:[2,32],50:[2,32],53:[2,32],54:[2,32],56:[2,32],57:[2,32],58:[2,32],59:[2,32],61:[2,32],62:[2,32],65:[2,32],67:[2,32],69:[2,32],71:[2,32],73:[2,32],74:[2,32],75:[2,32],76:[2,32],77:[2,32],78:[2,32],79:[2,32],80:[2,32],81:[2,32],82:[2,32]},{7:[2,41],33:[2,41],36:[2,41],37:[2,41],38:[2,41],43:[2,41],44:[2,41],45:[2,41],46:[2,41],47:[2,41]},{7:[2,42],33:[2,42],36:[2,42],37:[2,42],38:[2,42],43:[2,42],44:[2,42],45:[2,42],46:[2,42],47:[2,42]},{7:[2,43],33:[2,43],36:[2,43],37:[2,43],38:[2,43],43:[2,43],44:[2,43],45:[2,43],46:[2,43],47:[2,43]},{7:[2,44],33:[2,44],36:[2,44],37:[2,44],38:[2,44],43:[2,44],44:[2,44],45:[2,44],46:[2,44],47:[2,44]},{7:[2,45],33:[2,45],36:[2,45],37:[2,45],38:[2,45],43:[2,45],44:[2,45],45:[2,45],46:[2,45],47:[2,45]},{7:[2,46],33:[2,46],36:[2,46],37:[2,46],38:[2,46],43:[2,46],44:[2,46],45:[2,46],46:[2,46],47:[2,46]},{9:[2,69],15:[2,69],16:[2,69],24:[2,69],39:[2,69],65:[1,94],67:[2,69],69:[2,69],71:[2,69]},{9:[2,28],13:[2,28],15:[2,28],16:[2,28],24:[2,28],26:[2,28],34:[2,28],38:[2,28],39:[2,28],43:[2,28],44:[2,28],45:[2,28],46:[2,28],49:[2,28],50:[2,28],53:[2,28],54:[2,28],56:[2,28],57:[2,28],58:[2,28],59:[2,28],61:[2,28],62:[2,28],65:[2,28],67:[2,28],69:[2,28],71:[2,28],73:[2,28],74:[2,28],75:[2,28],76:[2,28],77:[2,28],78:[2,28],79:[2,28],80:[2,28],81:[2,28],82:[2,28]},{9:[2,29],13:[2,29],15:[2,29],16:[2,29],24:[2,29],26:[2,29],34:[2,29],38:[2,29],39:[2,29],43:[2,29],44:[2,29],45:[2,29],46:[2,29],49:[2,29],50:[2,29],53:[2,29],54:[2,29],56:[2,29],57:[2,29],58:[2,29],59:[2,29],61:[2,29],62:[2,29],65:[2,29],67:[2,29],69:[2,29],71:[2,29],73:[2,29],74:[2,29],75:[2,29],76:[2,29],77:[2,29],78:[2,29],79:[2,29],80:[2,29],81:[2,29],82:[2,29]},{9:[2,30],13:[2,30],15:[2,30],16:[2,30],24:[2,30],26:[2,30],34:[2,30],38:[2,30],39:[2,30],43:[2,30],44:[2,30],45:[2,30],46:[2,30],49:[2,30],50:[2,30],53:[2,30],54:[2,30],56:[2,30],57:[2,30],58:[2,30],59:[2,30],61:[2,30],62:[2,30],65:[2,30],67:[2,30],69:[2,30],71:[2,30],73:[2,30],74:[2,30],75:[2,30],76:[2,30],77:[2,30],78:[2,30],79:[2,30],80:[2,30],81:[2,30],82:[2,30]},{7:[1,59],30:95,33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:71,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56],48:68,51:67,52:66,55:65,60:64,63:63,64:58,66:50,68:47,70:70},{9:[2,67],15:[2,67],16:[2,67],24:[2,67],39:[2,67],43:[1,96],65:[2,67],67:[2,67],69:[2,67],71:[2,67]},{9:[2,65],15:[2,65],16:[2,65],24:[2,65],39:[2,65],43:[2,65],61:[1,97],62:[1,98],65:[2,65],67:[2,65],69:[2,65],71:[2,65]},{9:[2,62],15:[2,62],16:[2,62],24:[2,62],39:[2,62],43:[2,62],56:[1,99],57:[1,100],58:[1,101],59:[1,102],61:[2,62],62:[2,62],65:[2,62],67:[2,62],69:[2,62],71:[2,62]},{9:[2,57],15:[2,57],16:[2,57],24:[2,57],39:[2,57],43:[2,57],53:[1,103],54:[1,104],56:[2,57],57:[2,57],58:[2,57],59:[2,57],61:[2,57],62:[2,57],65:[2,57],67:[2,57],69:[2,57],71:[2,57]},{9:[2,54],15:[2,54],16:[2,54],24:[2,54],39:[2,54],43:[2,54],45:[1,105],46:[1,106],53:[2,54],54:[2,54],56:[2,54],57:[2,54],58:[2,54],59:[2,54],61:[2,54],62:[2,54],65:[2,54],67:[2,54],69:[2,54],71:[2,54]},{9:[2,51],15:[2,51],16:[2,51],24:[2,51],39:[2,51],43:[2,51],44:[1,107],45:[2,51],46:[2,51],49:[1,108],50:[1,109],53:[2,51],54:[2,51],56:[2,51],57:[2,51],58:[2,51],59:[2,51],61:[2,51],62:[2,51],65:[2,51],67:[2,51],69:[2,51],71:[2,51]},{9:[2,19]},{9:[2,88],15:[2,88],16:[2,88],24:[2,88],39:[2,88],71:[1,75]},{9:[2,47],15:[2,47],16:[2,47],24:[2,47],39:[2,47],43:[2,47],44:[2,47],45:[2,47],46:[2,47],49:[2,47],50:[2,47],53:[2,47],54:[2,47],56:[2,47],57:[2,47],58:[2,47],59:[2,47],61:[2,47],62:[2,47],65:[2,47],67:[2,47],69:[2,47],71:[2,47]},{7:[1,59],24:[2,20],30:111,32:110,33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:71,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56],48:68,51:67,52:66,55:65,60:64,63:63,64:58,66:50,68:47,70:70},{11:[2,13],18:[2,13],20:[2,13],21:[2,13]},{7:[2,22],11:[1,112],23:32,25:33,26:[1,34],28:35,29:[1,36],31:37,33:[1,38]},{7:[1,59],33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:71,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56],48:68,51:67,52:66,55:65,60:64,63:63,64:58,66:50,68:113},{7:[1,59],27:114,33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:46,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56],48:68,51:67,52:66,55:65,60:64,63:63,64:58,66:50,68:47,70:45},{7:[2,77],33:[2,77],36:[2,77],37:[2,77],38:[2,77],43:[2,77],44:[2,77],45:[2,77],46:[2,77],47:[2,77]},{7:[2,78],33:[2,78],36:[2,78],37:[2,78],38:[2,78],43:[2,78],44:[2,78],45:[2,78],46:[2,78],47:[2,78]},{7:[2,79],33:[2,79],36:[2,79],37:[2,79],38:[2,79],43:[2,79],44:[2,79],45:[2,79],46:[2,79],47:[2,79]},{7:[2,80],33:[2,80],36:[2,80],37:[2,80],38:[2,80],43:[2,80],44:[2,80],45:[2,80],46:[2,80],47:[2,80]},{7:[2,81],33:[2,81],36:[2,81],37:[2,81],38:[2,81],43:[2,81],44:[2,81],45:[2,81],46:[2,81],47:[2,81]},{7:[2,82],33:[2,82],36:[2,82],37:[2,82],38:[2,82],43:[2,82],44:[2,82],45:[2,82],46:[2,82],47:[2,82]},{7:[2,83],33:[2,83],36:[2,83],37:[2,83],38:[2,83],43:[2,83],44:[2,83],45:[2,83],46:[2,83],47:[2,83]},{7:[2,84],33:[2,84],36:[2,84],37:[2,84],38:[2,84],43:[2,84],44:[2,84],45:[2,84],46:[2,84],47:[2,84]},{7:[2,85],33:[2,85],36:[2,85],37:[2,85],38:[2,85],43:[2,85],44:[2,85],45:[2,85],46:[2,85],47:[2,85]},{7:[2,86],33:[2,86],36:[2,86],37:[2,86],38:[2,86],43:[2,86],44:[2,86],45:[2,86],46:[2,86],47:[2,86]},{7:[2,87],33:[2,87],36:[2,87],37:[2,87],38:[2,87],43:[2,87],44:[2,87],45:[2,87],46:[2,87],47:[2,87]},{7:[1,59],33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:71,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56],48:68,51:67,52:66,55:65,60:64,63:63,64:58,66:115},{7:[1,59],30:116,33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:71,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56],48:68,51:67,52:66,55:65,60:64,63:63,64:58,66:50,68:47,70:70},{7:[1,59],30:111,32:118,33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],39:[1,117],40:48,41:71,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56],48:68,51:67,52:66,55:65,60:64,63:63,64:58,66:50,68:47,70:70},{7:[1,119]},{9:[2,40],15:[2,40],16:[2,40],24:[2,40],26:[2,40],39:[2,40],43:[2,40],44:[2,40],45:[2,40],46:[2,40],49:[2,40],50:[2,40],53:[2,40],54:[2,40],56:[2,40],57:[2,40],58:[2,40],59:[2,40],61:[2,40],62:[2,40],65:[2,40],67:[2,40],69:[2,40],71:[2,40],73:[2,40],74:[2,40],75:[2,40],76:[2,40],77:[2,40],78:[2,40],79:[2,40],80:[2,40],81:[2,40],82:[2,40]},{7:[1,59],33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:71,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56],48:68,51:67,52:66,55:65,60:64,63:63,64:120},{7:[1,59],33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:71,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56],48:68,51:67,52:66,55:65,60:64,63:121},{39:[1,122]},{7:[1,59],33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:71,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56],48:68,51:67,52:66,55:65,60:123},{7:[1,59],33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:71,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56],48:68,51:67,52:66,55:124},{7:[1,59],33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:71,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56],48:68,51:67,52:66,55:125},{7:[1,59],33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:71,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56],48:68,51:67,52:126},{7:[1,59],33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:71,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56],48:68,51:67,52:127},{7:[1,59],33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:71,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56],48:68,51:67,52:128},{7:[1,59],33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:71,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56],48:68,51:67,52:129},{7:[1,59],33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:71,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56],48:68,51:130},{7:[1,59],33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:71,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56],48:68,51:131},{7:[1,59],33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:71,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56],48:132},{7:[1,59],33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:71,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56],48:133},{7:[1,59],33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:134,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56]},{7:[1,59],33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:135,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56]},{7:[1,59],33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:136,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56]},{16:[1,137],24:[2,21]},{16:[2,37],24:[2,37],39:[2,37]},{24:[2,16]},{9:[2,74],15:[2,74],16:[2,74],24:[2,74],39:[2,74],69:[1,88],71:[2,74]},{24:[2,76]},{9:[2,72],15:[2,72],16:[2,72],24:[2,72],39:[2,72],67:[1,93],69:[2,72],71:[2,72]},{15:[1,138]},{9:[2,34],13:[2,34],15:[2,34],16:[2,34],24:[2,34],26:[2,34],34:[2,34],38:[2,34],39:[2,34],43:[2,34],44:[2,34],45:[2,34],46:[2,34],49:[2,34],50:[2,34],53:[2,34],54:[2,34],56:[2,34],57:[2,34],58:[2,34],59:[2,34],61:[2,34],62:[2,34],65:[2,34],67:[2,34],69:[2,34],71:[2,34],73:[2,34],74:[2,34],75:[2,34],76:[2,34],77:[2,34],78:[2,34],79:[2,34],80:[2,34],81:[2,34],82:[2,34]},{16:[1,137],39:[1,139]},{9:[2,36],13:[2,36],15:[2,36],16:[2,36],24:[2,36],26:[2,36],34:[2,36],38:[2,36],39:[2,36],43:[2,36],44:[2,36],45:[2,36],46:[2,36],49:[2,36],50:[2,36],53:[2,36],54:[2,36],56:[2,36],57:[2,36],58:[2,36],59:[2,36],61:[2,36],62:[2,36],65:[2,36],67:[2,36],69:[2,36],71:[2,36],73:[2,36],74:[2,36],75:[2,36],76:[2,36],77:[2,36],78:[2,36],79:[2,36],80:[2,36],81:[2,36],82:[2,36]},{9:[2,70],15:[2,70],16:[2,70],24:[2,70],39:[2,70],65:[1,94],67:[2,70],69:[2,70],71:[2,70]},{9:[2,68],15:[2,68],16:[2,68],24:[2,68],39:[2,68],43:[1,96],65:[2,68],67:[2,68],69:[2,68],71:[2,68]},{9:[2,31],13:[2,31],15:[2,31],16:[2,31],24:[2,31],26:[2,31],34:[2,31],38:[2,31],39:[2,31],43:[2,31],44:[2,31],45:[2,31],46:[2,31],49:[2,31],50:[2,31],53:[2,31],54:[2,31],56:[2,31],57:[2,31],58:[2,31],59:[2,31],61:[2,31],62:[2,31],65:[2,31],67:[2,31],69:[2,31],71:[2,31],73:[2,31],74:[2,31],75:[2,31],76:[2,31],77:[2,31],78:[2,31],79:[2,31],80:[2,31],81:[2,31],82:[2,31]},{9:[2,66],15:[2,66],16:[2,66],24:[2,66],39:[2,66],43:[2,66],61:[1,97],62:[1,98],65:[2,66],67:[2,66],69:[2,66],71:[2,66]},{9:[2,63],15:[2,63],16:[2,63],24:[2,63],39:[2,63],43:[2,63],56:[1,99],57:[1,100],58:[1,101],59:[1,102],61:[2,63],62:[2,63],65:[2,63],67:[2,63],69:[2,63],71:[2,63]},{9:[2,64],15:[2,64],16:[2,64],24:[2,64],39:[2,64],43:[2,64],56:[1,99],57:[1,100],58:[1,101],59:[1,102],61:[2,64],62:[2,64],65:[2,64],67:[2,64],69:[2,64],71:[2,64]},{9:[2,58],15:[2,58],16:[2,58],24:[2,58],39:[2,58],43:[2,58],53:[1,103],54:[1,104],56:[2,58],57:[2,58],58:[2,58],59:[2,58],61:[2,58],62:[2,58],65:[2,58],67:[2,58],69:[2,58],71:[2,58]},{9:[2,59],15:[2,59],16:[2,59],24:[2,59],39:[2,59],43:[2,59],53:[1,103],54:[1,104],56:[2,59],57:[2,59],58:[2,59],59:[2,59],61:[2,59],62:[2,59],65:[2,59],67:[2,59],69:[2,59],71:[2,59]},{9:[2,60],15:[2,60],16:[2,60],24:[2,60],39:[2,60],43:[2,60],53:[1,103],54:[1,104],56:[2,60],57:[2,60],58:[2,60],59:[2,60],61:[2,60],62:[2,60],65:[2,60],67:[2,60],69:[2,60],71:[2,60]},{9:[2,61],15:[2,61],16:[2,61],24:[2,61],39:[2,61],43:[2,61],53:[1,103],54:[1,104],56:[2,61],57:[2,61],58:[2,61],59:[2,61],61:[2,61],62:[2,61],65:[2,61],67:[2,61],69:[2,61],71:[2,61]},{9:[2,55],15:[2,55],16:[2,55],24:[2,55],39:[2,55],43:[2,55],45:[1,105],46:[1,106],53:[2,55],54:[2,55],56:[2,55],57:[2,55],58:[2,55],59:[2,55],61:[2,55],62:[2,55],65:[2,55],67:[2,55],69:[2,55],71:[2,55]},{9:[2,56],15:[2,56],16:[2,56],24:[2,56],39:[2,56],43:[2,56],45:[1,105],46:[1,106],53:[2,56],54:[2,56],56:[2,56],57:[2,56],58:[2,56],59:[2,56],61:[2,56],62:[2,56],65:[2,56],67:[2,56],69:[2,56],71:[2,56]},{9:[2,52],15:[2,52],16:[2,52],24:[2,52],39:[2,52],43:[2,52],44:[1,107],45:[2,52],46:[2,52],49:[1,108],50:[1,109],53:[2,52],54:[2,52],56:[2,52],57:[2,52],58:[2,52],59:[2,52],61:[2,52],62:[2,52],65:[2,52],67:[2,52],69:[2,52],71:[2,52]},{9:[2,53],15:[2,53],16:[2,53],24:[2,53],39:[2,53],43:[2,53],44:[1,107],45:[2,53],46:[2,53],49:[1,108],50:[1,109],53:[2,53],54:[2,53],56:[2,53],57:[2,53],58:[2,53],59:[2,53],61:[2,53],62:[2,53],65:[2,53],67:[2,53],69:[2,53],71:[2,53]},{9:[2,48],15:[2,48],16:[2,48],24:[2,48],39:[2,48],43:[2,48],44:[2,48],45:[2,48],46:[2,48],49:[2,48],50:[2,48],53:[2,48],54:[2,48],56:[2,48],57:[2,48],58:[2,48],59:[2,48],61:[2,48],62:[2,48],65:[2,48],67:[2,48],69:[2,48],71:[2,48]},{9:[2,49],15:[2,49],16:[2,49],24:[2,49],39:[2,49],43:[2,49],44:[2,49],45:[2,49],46:[2,49],49:[2,49],50:[2,49],53:[2,49],54:[2,49],56:[2,49],57:[2,49],58:[2,49],59:[2,49],61:[2,49],62:[2,49],65:[2,49],67:[2,49],69:[2,49],71:[2,49]},{9:[2,50],15:[2,50],16:[2,50],24:[2,50],39:[2,50],43:[2,50],44:[2,50],45:[2,50],46:[2,50],49:[2,50],50:[2,50],53:[2,50],54:[2,50],56:[2,50],57:[2,50],58:[2,50],59:[2,50],61:[2,50],62:[2,50],65:[2,50],67:[2,50],69:[2,50],71:[2,50]},{7:[1,59],30:140,33:[1,57],35:51,36:[1,60],37:[1,61],38:[1,62],40:48,41:71,42:49,43:[1,52],44:[1,53],45:[1,54],46:[1,55],47:[1,56],48:68,51:67,52:66,55:65,60:64,63:63,64:58,66:50,68:47,70:70},{9:[2,33],13:[2,33],15:[2,33],16:[2,33],24:[2,33],26:[2,33],34:[2,33],38:[2,33],39:[2,33],43:[2,33],44:[2,33],45:[2,33],46:[2,33],49:[2,33],50:[2,33],53:[2,33],54:[2,33],56:[2,33],57:[2,33],58:[2,33],59:[2,33],61:[2,33],62:[2,33],65:[2,33],67:[2,33],69:[2,33],71:[2,33],73:[2,33],74:[2,33],75:[2,33],76:[2,33],77:[2,33],78:[2,33],79:[2,33],80:[2,33],81:[2,33],82:[2,33]},{9:[2,35],13:[2,35],15:[2,35],16:[2,35],24:[2,35],26:[2,35],34:[2,35],38:[2,35],39:[2,35],43:[2,35],44:[2,35],45:[2,35],46:[2,35],49:[2,35],50:[2,35],53:[2,35],54:[2,35],56:[2,35],57:[2,35],58:[2,35],59:[2,35],61:[2,35],62:[2,35],65:[2,35],67:[2,35],69:[2,35],71:[2,35],73:[2,35],74:[2,35],75:[2,35],76:[2,35],77:[2,35],78:[2,35],79:[2,35],80:[2,35],81:[2,35],82:[2,35]},{16:[2,38],24:[2,38],39:[2,38]}],
defaultActions: {13:[2,6],35:[2,18],38:[2,23],44:[2,17],69:[2,19],112:[2,16],114:[2,76]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

StateBox = require('../lib/statebox');
ParseHelpers = require('./parse_helpers');
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
/**/) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2: return 37; 
break;
case 3: return 37; 
break;
case 4: return 78; 
break;
case 5: return 79; 
break;
case 6: return 18; 
break;
case 7: return 20; 
break;
case 8: return 58; 
break;
case 9: return 59; 
break;
case 10: return 61; 
break;
case 11: return 62; 
break;
case 12: return 69; 
break;
case 13: return 71; 
break;
case 14: return 53; 
break;
case 15: return 54; 
break;
case 16: return 73; 
break;
case 17: return 74; 
break;
case 18: return 75; 
break;
case 19: return 76; 
break;
case 20: return 77; 
break;
case 21: return 80; 
break;
case 22: return 81; 
break;
case 23: return 82; 
break;
case 24: return 21; 
break;
case 25: return 13; 
break;
case 26: return 15; 
break;
case 27: return 38; 
break;
case 28: return 39; 
break;
case 29: return 9; 
break;
case 30: return 11; 
break;
case 31: return 56; 
break;
case 32: return 57; 
break;
case 33: return 16; 
break;
case 34: return 24; 
break;
case 35: return 34; 
break;
case 36: return 43; 
break;
case 37: return 67; 
break;
case 38: return 65; 
break;
case 39: return 44; 
break;
case 40: return 49; 
break;
case 41: return 50; 
break;
case 42: return 45; 
break;
case 43: return 46; 
break;
case 44: return 47; 
break;
case 45: return 33; 
break;
case 46: return 29; 
break;
case 47: return 6; 
break;
case 48: return 7; 
break;
case 49: return 36; 
break;
}
},
rules: [/^(?:\n\s*#[^\n]*\n)/,/^(?:\s+)/,/^(?:"(\\.|[^"])*")/,/^(?:'(\\.|[^'])*')/,/^(?:<<=)/,/^(?:>>=)/,/^(?:->)/,/^(?:<-)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<<)/,/^(?:>>)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:&=)/,/^(?:\^=)/,/^(?:\|=)/,/^(?:@)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:<)/,/^(?:>)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?:&)/,/^(?:\|)/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\+)/,/^(?:-)/,/^(?:~)/,/^(?:!)/,/^(?:\?)/,/^(?:state\b)/,/^(?:\w+)/,/^(?:[0-9]+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}